
//----------------------------------------------------------------------
//Symbol 15 MovieClip [BrdrHilght] Frame 1
//----------------------------------------------------------------------
    mx.skins.ColoredSkinElement.setColorStyle(this, "highlightColor");

﻿
//----------------------------------------------------------------------
//Symbol 52 MovieClip [__Packages.mx.skins.halo.RectBorder] Frame 0
//----------------------------------------------------------------------
    class mx.skins.halo.RectBorder extends mx.skins.RectBorder
    {
        var offset, getStyle, borderStyleName, __borderMetrics, className, borderColorName, backgroundColorName, shadowColorName, highlightColorName, buttonColorName, __get__width, __get__height, clear, _color, drawRoundRect, beginFill, drawRect, endFill;
        function RectBorder () {
            super();
        }
        function init(Void) {
            borderWidths.default = 3;
            super.init();
        }
        function getBorderMetrics(Void) {
            if (offset == undefined) {
                var _local3 = getStyle(borderStyleName);
                offset = borderWidths[_local3];
            }
            if ((getStyle(borderStyleName) == "default") || (getStyle(borderStyleName) == "alert")) {
                __borderMetrics = {left:3, top:1, right:3, bottom:3};
                return(__borderMetrics);
            }
            return(super.getBorderMetrics());
        }
        function drawBorder(Void) {
            var _local6 = _global.styles[className];
            if (_local6 == undefined) {
                _local6 = _global.styles.RectBorder;
            }
            var _local5 = getStyle(borderStyleName);
            var _local7 = getStyle(borderColorName);
            if (_local7 == undefined) {
                _local7 = _local6[borderColorName];
            }
            var _local8 = getStyle(backgroundColorName);
            if (_local8 == undefined) {
                _local8 = _local6[backgroundColorName];
            }
            var _local16 = getStyle("backgroundImage");
            if (_local5 != "none") {
                var _local14 = getStyle(shadowColorName);
                if (_local14 == undefined) {
                    _local14 = _local6[shadowColorName];
                }
                var _local13 = getStyle(highlightColorName);
                if (_local13 == undefined) {
                    _local13 = _local6[highlightColorName];
                }
                var _local12 = getStyle(buttonColorName);
                if (_local12 == undefined) {
                    _local12 = _local6[buttonColorName];
                }
                var _local11 = getStyle(borderCapColorName);
                if (_local11 == undefined) {
                    _local11 = _local6[borderCapColorName];
                }
                var _local10 = getStyle(shadowCapColorName);
                if (_local10 == undefined) {
                    _local10 = _local6[shadowCapColorName];
                }
            }
            offset = borderWidths[_local5];
            var _local9 = offset;
            var _local3 = __get__width();
            var _local4 = __get__height();
            clear();
            _color = undefined;
            if (_local5 == "none") {
            } else if (_local5 == "inset") {
                _color = colorList;
                draw3dBorder(_local11, _local12, _local7, _local13, _local14, _local10);
            } else if (_local5 == "outset") {
                _color = colorList;
                draw3dBorder(_local11, _local7, _local12, _local14, _local13, _local10);
            } else if (_local5 == "alert") {
                var _local15 = getStyle("themeColor");
                drawRoundRect(0, 5, _local3, _local4 - 5, 5, 6184542, 10);
                drawRoundRect(1, 4, _local3 - 2, _local4 - 5, 4, [6184542, 6184542], 10, 0, "radial");
                drawRoundRect(2, 0, _local3 - 4, _local4 - 2, 3, [0, 14342874], 100, 0, "radial");
                drawRoundRect(2, 0, _local3 - 4, _local4 - 2, 3, _local15, 50);
                drawRoundRect(3, 1, _local3 - 6, _local4 - 4, 2, 16777215, 100);
            } else if (_local5 == "default") {
                drawRoundRect(0, 5, _local3, _local4 - 5, {tl:5, tr:5, br:0, bl:0}, 6184542, 10);
                drawRoundRect(1, 4, _local3 - 2, _local4 - 5, {tl:4, tr:4, br:0, bl:0}, [6184542, 6184542], 10, 0, "radial");
                drawRoundRect(2, 0, _local3 - 4, _local4 - 2, {tl:3, tr:3, br:0, bl:0}, [12897484, 11844796], 100, 0, "radial");
                drawRoundRect(3, 1, _local3 - 6, _local4 - 4, {tl:2, tr:2, br:0, bl:0}, 16777215, 100);
            } else if (_local5 == "dropDown") {
                drawRoundRect(0, 0, _local3 + 1, _local4, {tl:4, tr:0, br:0, bl:4}, [13290186, 7895160], 100, -10, "linear");
                drawRoundRect(1, 1, _local3 - 1, _local4 - 2, {tl:3, tr:0, br:0, bl:3}, 16777215, 100);
            } else if (_local5 == "menuBorder") {
                var _local15 = getStyle("themeColor");
                drawRoundRect(4, 4, _local3 - 2, _local4 - 3, 0, [6184542, 6184542], 10, 0, "radial");
                drawRoundRect(4, 4, _local3 - 1, _local4 - 2, 0, 6184542, 10);
                drawRoundRect(0, 0, _local3 + 1, _local4, 0, [0, 14342874], 100, 250, "linear");
                drawRoundRect(0, 0, _local3 + 1, _local4, 0, _local15, 50);
                drawRoundRect(2, 2, _local3 - 3, _local4 - 4, 0, 16777215, 100);
            } else if (_local5 == "comboNonEdit") {
            } else {
                beginFill(_local7);
                drawRect(0, 0, _local3, _local4);
                drawRect(1, 1, _local3 - 1, _local4 - 1);
                endFill();
                _color = borderColorName;
            }
            if (_local8 != undefined) {
                beginFill(_local8);
                drawRect(_local9, _local9, __get__width() - _local9, __get__height() - _local9);
                endFill();
            }
        }
        function draw3dBorder(c1, c2, c3, c4, c5, c6) {
            var _local3 = __get__width();
            var _local2 = __get__height();
            beginFill(c1);
            drawRect(0, 0, _local3, _local2);
            drawRect(1, 0, _local3 - 1, _local2);
            endFill();
            beginFill(c2);
            drawRect(1, 0, _local3 - 1, 1);
            endFill();
            beginFill(c3);
            drawRect(1, _local2 - 1, _local3 - 1, _local2);
            endFill();
            beginFill(c4);
            drawRect(1, 1, _local3 - 1, 2);
            endFill();
            beginFill(c5);
            drawRect(1, _local2 - 2, _local3 - 1, _local2 - 1);
            endFill();
            beginFill(c6);
            drawRect(1, 2, _local3 - 1, _local2 - 2);
            drawRect(2, 2, _local3 - 2, _local2 - 2);
            endFill();
        }
        static function classConstruct() {
            mx.core.ext.UIObjectExtensions.Extensions();
            _global.styles.rectBorderClass = mx.skins.halo.RectBorder;
            _global.skinRegistry.RectBorder = true;
            return(true);
        }
        static var symbolName = "RectBorder";
        static var symbolOwner = mx.skins.halo.RectBorder;
        static var version = "2.0.2.126";
        var borderCapColorName = "borderCapColor";
        var shadowCapColorName = "shadowCapColor";
        var colorList = {highlightColor:0, borderColor:0, buttonColor:0, shadowColor:0, borderCapColor:0, shadowCapColor:0};
        var borderWidths = {none:0, solid:1, inset:2, outset:2, alert:3, dropDown:2, menuBorder:2, comboNonEdit:2};
        static var classConstructed = classConstruct();
        static var UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
    }
﻿
//----------------------------------------------------------------------
//Symbol 49 MovieClip [__Packages.mx.core.ext.UIComponentExtensions] Frame 0
//----------------------------------------------------------------------
    class mx.core.ext.UIComponentExtensions
    {
        function UIComponentExtensions () {
        }
        static function Extensions() {
            if (bExtended == true) {
                return(true);
            }
            bExtended = true;
            TextField.prototype.setFocus = function () {
                Selection.setFocus(this);
            };
            TextField.prototype.onSetFocus = function (oldFocus) {
                if (this.tabEnabled != false) {
                    if (this.getFocusManager().bDrawFocus) {
                        this.drawFocus(true);
                    }
                }
            };
            TextField.prototype.onKillFocus = function (oldFocus) {
                if (this.tabEnabled != false) {
                    this.drawFocus(false);
                }
            };
            TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
            TextField.prototype.getFocusManager = mx.core.UIComponent.prototype.getFocusManager;
            mx.managers.OverlappedWindows.enableOverlappedWindows();
            mx.styles.CSSSetStyle.enableRunTimeCSS();
            mx.managers.FocusManager.enableFocusManagement();
        }
        static var bExtended = false;
        static var UIComponentExtended = Extensions();
        static var UIComponentDependency = mx.core.UIComponent;
        static var FocusManagerDependency = mx.managers.FocusManager;
        static var OverlappedWindowsDependency = mx.managers.OverlappedWindows;
    }
﻿
//----------------------------------------------------------------------
//Symbol 47 MovieClip [__Packages.mx.managers.OverlappedWindows] Frame 0
//----------------------------------------------------------------------
    class mx.managers.OverlappedWindows
    {
        function OverlappedWindows () {
        }
        static function checkIdle(Void) {
            if (mx.managers.SystemManager.idleFrames > 10) {
                mx.managers.SystemManager.dispatchEvent({type:"idle"});
            } else {
                mx.managers.SystemManager.idleFrames++;
            }
        }
        static function __addEventListener(e, o, l) {
            if (e == "idle") {
                if (mx.managers.SystemManager.interval == undefined) {
                    mx.managers.SystemManager.interval = setInterval(mx.managers.SystemManager.checkIdle, 100);
                }
            }
            mx.managers.SystemManager._xAddEventListener(e, o, l);
        }
        static function __removeEventListener(e, o, l) {
            if (e == "idle") {
                if (mx.managers.SystemManager._xRemoveEventListener(e, o, l) == 0) {
                    clearInterval(mx.managers.SystemManager.interval);
                }
            } else {
                mx.managers.SystemManager._xRemoveEventListener(e, o, l);
            }
        }
        static function onMouseDown(Void) {
            mx.managers.SystemManager.idleFrames = 0;
            mx.managers.SystemManager.isMouseDown = true;
            var _local5 = _root;
            var _local3;
            var _local8 = _root._xmouse;
            var _local7 = _root._ymouse;
            if (mx.managers.SystemManager.form.modalWindow == undefined) {
                if (mx.managers.SystemManager.forms.length > 1) {
                    var _local6 = mx.managers.SystemManager.forms.length;
                    var _local4;
                    _local4 = 0;
                    while (_local4 < _local6) {
                        var _local2 = mx.managers.SystemManager.forms[_local4];
                        if (_local2._visible) {
                            if (_local2.hitTest(_local8, _local7)) {
                                if (_local3 == undefined) {
                                    _local3 = _local2.getDepth();
                                    _local5 = _local2;
                                } else if (_local3 < _local2.getDepth()) {
                                    _local3 = _local2.getDepth();
                                    _local5 = _local2;
                                }
                            }
                        }
                        _local4++;
                    }
                    if (_local5 != mx.managers.SystemManager.form) {
                        mx.managers.SystemManager.activate(_local5);
                    }
                }
            }
            var _local9 = mx.managers.SystemManager.form;
            _local9.focusManager._onMouseDown();
        }
        static function onMouseMove(Void) {
            mx.managers.SystemManager.idleFrames = 0;
        }
        static function onMouseUp(Void) {
            mx.managers.SystemManager.isMouseDown = false;
            mx.managers.SystemManager.idleFrames = 0;
        }
        static function activate(f) {
            if (mx.managers.SystemManager.form != undefined) {
                if ((mx.managers.SystemManager.form != f) && (mx.managers.SystemManager.forms.length > 1)) {
                    var _local1 = mx.managers.SystemManager.form;
                    _local1.focusManager.deactivate();
                }
            }
            mx.managers.SystemManager.form = f;
            f.focusManager.activate();
        }
        static function deactivate(f) {
            if (mx.managers.SystemManager.form != undefined) {
                if ((mx.managers.SystemManager.form == f) && (mx.managers.SystemManager.forms.length > 1)) {
                    var _local5 = mx.managers.SystemManager.form;
                    _local5.focusManager.deactivate();
                    var _local3 = mx.managers.SystemManager.forms.length;
                    var _local1;
                    var _local2;
                    _local1 = 0;
                    while (_local1 < _local3) {
                        if (mx.managers.SystemManager.forms[_local1] == f) {
                            _local1 = _local1 + 1;
                            while (_local1 < _local3) {
                                if (mx.managers.SystemManager.forms[_local1]._visible == true) {
                                    _local2 = mx.managers.SystemManager.forms[_local1];
                                }
                                _local1++;
                            }
                            mx.managers.SystemManager.form = _local2;
                            break;
                        }
                        if (mx.managers.SystemManager.forms[_local1]._visible == true) {
                            _local2 = mx.managers.SystemManager.forms[_local1];
                        }
                        _local1++;
                    }
                    _local5 = mx.managers.SystemManager.form;
                    _local5.focusManager.activate();
                }
            }
        }
        static function addFocusManager(f) {
            mx.managers.SystemManager.forms.push(f);
            mx.managers.SystemManager.activate(f);
        }
        static function removeFocusManager(f) {
            var _local3 = mx.managers.SystemManager.forms.length;
            var _local1;
            _local1 = 0;
            while (_local1 < _local3) {
                if (mx.managers.SystemManager.forms[_local1] == f) {
                    if (mx.managers.SystemManager.form == f) {
                        mx.managers.SystemManager.deactivate(f);
                    }
                    mx.managers.SystemManager.forms.splice(_local1, 1);
                    return(undefined);
                }
                _local1++;
            }
        }
        static function enableOverlappedWindows() {
            if (!initialized) {
                initialized = true;
                mx.managers.SystemManager.checkIdle = checkIdle;
                mx.managers.SystemManager.__addEventListener = __addEventListener;
                mx.managers.SystemManager.__removeEventListener = __removeEventListener;
                mx.managers.SystemManager.onMouseDown = onMouseDown;
                mx.managers.SystemManager.onMouseMove = onMouseMove;
                mx.managers.SystemManager.onMouseUp = onMouseUp;
                mx.managers.SystemManager.activate = activate;
                mx.managers.SystemManager.deactivate = deactivate;
                mx.managers.SystemManager.addFocusManager = addFocusManager;
                mx.managers.SystemManager.removeFocusManager = removeFocusManager;
            }
        }
        static var initialized = false;
        static var SystemManagerDependency = mx.managers.SystemManager;
    }
﻿
//----------------------------------------------------------------------
//Symbol 3 MovieClip [__Packages.mx.controls.SimpleButton] Frame 0
//----------------------------------------------------------------------
    class mx.controls.SimpleButton extends mx.core.UIComponent
    {
        static var emphasizedStyleDeclaration;
        var preset, boundingBox_mc, useHandCursor, skinName, linkLength, iconName, destroyObject, __width, _width, __height, _height, __emphaticStyleName, styleName, enabled, invalidate, pressFocus, dispatchEvent, autoRepeat, interval, getStyle, releaseFocus, createLabel, invalidateStyle;
        function SimpleButton () {
            super();
        }
        function init(Void) {
            super.init();
            if (preset == undefined) {
                boundingBox_mc._visible = false;
                boundingBox_mc._width = (boundingBox_mc._height = 0);
            }
            useHandCursor = false;
        }
        function createChildren(Void) {
            if (preset != undefined) {
                var _local2 = this[idNames[preset]];
                this[refNames[preset]] = _local2;
                skinName = _local2;
                if (falseOverSkin.length == 0) {
                    rolloverSkin = fus;
                }
                if (falseOverIcon.length == 0) {
                    rolloverIcon = fui;
                }
                initializing = false;
            } else if (__state == true) {
                setStateVar(true);
            } else {
                if (falseOverSkin.length == 0) {
                    rolloverSkin = fus;
                }
                if (falseOverIcon.length == 0) {
                    rolloverIcon = fui;
                }
            }
        }
        function setIcon(tag, linkageName) {
            return(setSkin(tag + 8, linkageName));
        }
        function changeIcon(tag, linkageName) {
            linkLength = linkageName.length;
            var _local2 = stateNames[tag] + "Icon";
            this[_local2] = linkageName;
            this[idNames[tag + 8]] = _local2;
            setStateVar(getState());
        }
        function changeSkin(tag, linkageName) {
            var _local2 = stateNames[tag] + "Skin";
            this[_local2] = linkageName;
            this[idNames[tag]] = _local2;
            setStateVar(getState());
        }
        function viewIcon(varName) {
            var _local4 = varName + "Icon";
            var _local3 = this[_local4];
            if (typeof(_local3) == "string") {
                var _local5 = _local3;
                if (__emphasized) {
                    if (this[_local3 + "Emphasized"].length > 0) {
                        _local3 = _local3 + "Emphasized";
                    }
                }
                if (this[_local3].length == 0) {
                    return(undefined);
                }
                _local3 = setIcon(tagMap[_local5], this[_local3]);
                if ((_local3 == undefined) && (_global.isLivePreview)) {
                    _local3 = setIcon(0, "ButtonIcon");
                }
                this[_local4] = _local3;
            }
            iconName._visible = false;
            iconName = _local3;
            iconName._visible = true;
        }
        function removeIcons() {
            var _local3 = 0;
            while (_local3 < 2) {
                var _local2 = 8;
                while (_local2 < 16) {
                    destroyObject(idNames[_local2]);
                    this[stateNames[_local2 - 8] + "Icon"] = "";
                    _local2++;
                }
                _local3++;
            }
            refresh();
        }
        function setSkin(tag, linkageName, initobj) {
            var _local3 = super.setSkin(tag, linkageName, ((initobj != undefined) ? (initobj) : ({styleName:this})));
            calcSize(tag, _local3);
            return(_local3);
        }
        function calcSize(Void) {
            __width = _width;
            __height = _height;
        }
        function viewSkin(varName, initObj) {
            var _local3 = varName + "Skin";
            var _local2 = this[_local3];
            if (typeof(_local2) == "string") {
                var _local4 = _local2;
                if (__emphasized) {
                    if (this[_local2 + "Emphasized"].length > 0) {
                        _local2 = _local2 + "Emphasized";
                    }
                }
                if (this[_local2].length == 0) {
                    return(undefined);
                }
                _local2 = setSkin(tagMap[_local4], this[_local2], ((initObj != undefined) ? (initObj) : ({styleName:this})));
                this[_local3] = _local2;
            }
            skinName._visible = false;
            skinName = _local2;
            skinName._visible = true;
        }
        function showEmphasized(e) {
            if (e && (!__emphatic)) {
                if (emphasizedStyleDeclaration != undefined) {
                    __emphaticStyleName = styleName;
                    styleName = emphasizedStyleDeclaration;
                }
                __emphatic = true;
            } else {
                if (__emphatic) {
                    styleName = __emphaticStyleName;
                }
                __emphatic = false;
            }
        }
        function refresh(Void) {
            var _local2 = getState();
            if (enabled == false) {
                viewIcon("disabled");
                viewSkin("disabled");
            } else {
                viewSkin(phase);
                viewIcon(phase);
            }
            setView(phase == "down");
            iconName.enabled = enabled;
        }
        function setView(offset) {
            if (iconName == undefined) {
                return(undefined);
            }
            var _local2 = (offset ? (btnOffset) : 0);
            iconName._x = ((__width - iconName._width) / 2) + _local2;
            iconName._y = ((__height - iconName._height) / 2) + _local2;
        }
        function setStateVar(state) {
            if (state) {
                if (trueOverSkin.length == 0) {
                    rolloverSkin = tus;
                } else {
                    rolloverSkin = trs;
                }
                if (trueOverIcon.length == 0) {
                    rolloverIcon = tui;
                } else {
                    rolloverIcon = tri;
                }
                upSkin = tus;
                downSkin = tds;
                disabledSkin = dts;
                upIcon = tui;
                downIcon = tdi;
                disabledIcon = dti;
            } else {
                if (falseOverSkin.length == 0) {
                    rolloverSkin = fus;
                } else {
                    rolloverSkin = frs;
                }
                if (falseOverIcon.length == 0) {
                    rolloverIcon = fui;
                } else {
                    rolloverIcon = fri;
                }
                upSkin = fus;
                downSkin = fds;
                disabledSkin = dfs;
                upIcon = fui;
                downIcon = fdi;
                disabledIcon = dfi;
            }
            __state = state;
        }
        function setState(state) {
            if (state != __state) {
                setStateVar(state);
                invalidate();
            }
        }
        function size(Void) {
            refresh();
        }
        function draw(Void) {
            if (initializing) {
                initializing = false;
                skinName.visible = true;
                iconName.visible = true;
            }
            size();
        }
        function getState(Void) {
            return(__state);
        }
        function setToggle(val) {
            __toggle = val;
            if (__toggle == false) {
                setState(false);
            }
        }
        function getToggle(Void) {
            return(__toggle);
        }
        function set toggle(val) {
            setToggle(val);
            //return(toggle);
        }
        function get toggle() {
            return(getToggle());
        }
        function set value(val) {
            setSelected(val);
            //return(value);
        }
        function get value() {
            return(getSelected());
        }
        function set selected(val) {
            setSelected(val);
            //return(selected);
        }
        function get selected() {
            return(getSelected());
        }
        function setSelected(val) {
            if (__toggle) {
                setState(val);
            } else {
                setState((initializing ? (val) : (__state)));
            }
        }
        function getSelected() {
            return(__state);
        }
        function setEnabled(val) {
            if (enabled != val) {
                super.setEnabled(val);
                invalidate();
            }
        }
        function onPress(Void) {
            pressFocus();
            phase = "down";
            refresh();
            dispatchEvent({type:"buttonDown"});
            if (autoRepeat) {
                interval = setInterval(this, "onPressDelay", getStyle("repeatDelay"));
            }
        }
        function onPressDelay(Void) {
            dispatchEvent({type:"buttonDown"});
            if (autoRepeat) {
                clearInterval(interval);
                interval = setInterval(this, "onPressRepeat", getStyle("repeatInterval"));
            }
        }
        function onPressRepeat(Void) {
            dispatchEvent({type:"buttonDown"});
            updateAfterEvent();
        }
        function onRelease(Void) {
            releaseFocus();
            phase = "rollover";
            if (interval != undefined) {
                clearInterval(interval);
                delete interval;
            }
            if (getToggle()) {
                setState(!getState());
            } else {
                refresh();
            }
            dispatchEvent({type:"click"});
        }
        function onDragOut(Void) {
            phase = "up";
            refresh();
            dispatchEvent({type:"buttonDragOut"});
        }
        function onDragOver(Void) {
            if (phase != "up") {
                onPress();
                return(undefined);
            }
            phase = "down";
            refresh();
        }
        function onReleaseOutside(Void) {
            releaseFocus();
            phase = "up";
            if (interval != undefined) {
                clearInterval(interval);
                delete interval;
            }
        }
        function onRollOver(Void) {
            phase = "rollover";
            refresh();
        }
        function onRollOut(Void) {
            phase = "up";
            refresh();
        }
        function getLabel(Void) {
            return(fui.text);
        }
        function setLabel(val) {
            if (typeof(fui) == "string") {
                createLabel("fui", 8, val);
                fui.styleName = this;
            } else {
                fui.text = val;
            }
            var _local4 = fui._getTextFormat();
            var _local2 = _local4.getTextExtent2(val);
            fui._width = _local2.width + 5;
            fui._height = _local2.height + 5;
            iconName = fui;
            setView(__state);
        }
        function get emphasized() {
            return(__emphasized);
        }
        function set emphasized(val) {
            __emphasized = val;
            var _local2 = 0;
            while (_local2 < 8) {
                this[idNames[_local2]] = stateNames[_local2] + "Skin";
                if (typeof(this[idNames[_local2 + 8]]) == "movieclip") {
                    this[idNames[_local2 + 8]] = stateNames[_local2] + "Icon";
                }
                _local2++;
            }
            showEmphasized(__emphasized);
            setStateVar(__state);
            invalidateStyle();
            //return(emphasized);
        }
        function keyDown(e) {
            if (e.code == 32) {
                onPress();
            }
        }
        function keyUp(e) {
            if (e.code == 32) {
                onRelease();
            }
        }
        function onKillFocus(newFocus) {
            super.onKillFocus();
            if (phase != "up") {
                phase = "up";
                refresh();
            }
        }
        static var symbolName = "SimpleButton";
        static var symbolOwner = mx.controls.SimpleButton;
        static var version = "2.0.2.126";
        var className = "SimpleButton";
        var style3dInset = 4;
        var btnOffset = 1;
        var __toggle = false;
        var __state = false;
        var __emphasized = false;
        var __emphatic = false;
        static var falseUp = 0;
        static var falseDown = 1;
        static var falseOver = 2;
        static var falseDisabled = 3;
        static var trueUp = 4;
        static var trueDown = 5;
        static var trueOver = 6;
        static var trueDisabled = 7;
        var falseUpSkin = "SimpleButtonUp";
        var falseDownSkin = "SimpleButtonIn";
        var falseOverSkin = "";
        var falseDisabledSkin = "SimpleButtonUp";
        var trueUpSkin = "SimpleButtonIn";
        var trueDownSkin = "";
        var trueOverSkin = "";
        var trueDisabledSkin = "SimpleButtonIn";
        var falseUpIcon = "";
        var falseDownIcon = "";
        var falseOverIcon = "";
        var falseDisabledIcon = "";
        var trueUpIcon = "";
        var trueDownIcon = "";
        var trueOverIcon = "";
        var trueDisabledIcon = "";
        var phase = "up";
        var fui = "falseUpIcon";
        var fus = "falseUpSkin";
        var fdi = "falseDownIcon";
        var fds = "falseDownSkin";
        var frs = "falseOverSkin";
        var fri = "falseOverIcon";
        var dfi = "falseDisabledIcon";
        var dfs = "falseDisabledSkin";
        var tui = "trueUpIcon";
        var tus = "trueUpSkin";
        var tdi = "trueDownIcon";
        var tds = "trueDownSkin";
        var trs = "trueOverSkin";
        var tri = "trueOverIcon";
        var dts = "trueDisabledSkin";
        var dti = "trueDisabledIcon";
        var rolloverSkin = mx.controls.SimpleButton.prototype.frs;
        var rolloverIcon = mx.controls.SimpleButton.prototype.fri;
        var upSkin = mx.controls.SimpleButton.prototype.fus;
        var downSkin = mx.controls.SimpleButton.prototype.fds;
        var disabledSkin = mx.controls.SimpleButton.prototype.dfs;
        var upIcon = mx.controls.SimpleButton.prototype.fui;
        var downIcon = mx.controls.SimpleButton.prototype.fdi;
        var disabledIcon = mx.controls.SimpleButton.prototype.dfi;
        var initializing = true;
        var idNames = ["fus", "fds", "frs", "dfs", "tus", "tds", "trs", "dts", "fui", "fdi", "fri", "dfi", "tui", "tdi", "tri", "dti"];
        var stateNames = ["falseUp", "falseDown", "falseOver", "falseDisabled", "trueUp", "trueDown", "trueOver", "trueDisabled"];
        var refNames = ["upSkin", "downSkin", "rolloverSkin", "disabledSkin"];
        var tagMap = {falseUpSkin:0, falseDownSkin:1, falseOverSkin:2, falseDisabledSkin:3, trueUpSkin:4, trueDownSkin:5, trueOverSkin:6, trueDisabledSkin:7, falseUpIcon:0, falseDownIcon:1, falseOverIcon:2, falseDisabledIcon:3, trueUpIcon:4, trueDownIcon:5, trueOverIcon:6, trueDisabledIcon:7};
    }
﻿
//----------------------------------------------------------------------
//Symbol 53 MovieClip [__Packages.mx.skins.halo.ButtonSkin] Frame 0
//----------------------------------------------------------------------
    class mx.skins.halo.ButtonSkin extends mx.skins.RectBorder
    {
        var __get__width, __get__height, getStyle, _parent, clear, drawRoundRect, __get__x, __get__y;
        function ButtonSkin () {
            super();
        }
        function init() {
            super.init();
        }
        function size() {
            drawHaloRect(__get__width(), __get__height());
        }
        function drawHaloRect(w, h) {
            var _local6 = getStyle("borderStyle");
            var _local4 = getStyle("themeColor");
            var _local5 = _parent.emphasized;
            clear();
            switch (_local6) {
                case "falseup" : 
                    if (_local5) {
                        drawRoundRect(__get__x(), __get__y(), w, h, 5, 9542041, 100);
                        drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 75);
                        drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 85, 0, "radial");
                        drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                        drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, _local4, 75);
                        drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                        drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
                    } else {
                        drawRoundRect(0, 0, w, h, 5, 9542041, 100);
                        drawRoundRect(1, 1, w - 2, h - 2, 4, [13291985, 16250871], 100, 0, "radial");
                        drawRoundRect(2, 2, w - 4, h - 4, 3, [9542041, 13818586], 100, 0, "radial");
                        drawRoundRect(3, 3, w - 6, h - 6, 2, 16777215, 100);
                        drawRoundRect(3, 4, w - 6, h - 7, 2, 16316664, 100);
                    }
                    break;
                case "falsedown" : 
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, 9542041, 100);
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, "radial");
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, _local4, 50);
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 40);
                    drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                    drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, _local4, 20);
                    break;
                case "falserollover" : 
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, 9542041, 100);
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 50);
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, "radial");
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, _local4, 50);
                    drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                    drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
                    break;
                case "falsedisabled" : 
                    drawRoundRect(0, 0, w, h, 5, 13159628, 100);
                    drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
                    drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
                    drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
                    break;
                case "trueup" : 
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, 10066329, 100);
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, "radial");
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, _local4, 50);
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 40);
                    drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                    drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, 16250871, 100);
                    break;
                case "truedown" : 
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, 10066329, 100);
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, "radial");
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, _local4, 50);
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 40);
                    drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                    drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, _local4, 20);
                    break;
                case "truerollover" : 
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, 9542041, 100);
                    drawRoundRect(__get__x(), __get__y(), w, h, 5, _local4, 50);
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, "radial");
                    drawRoundRect(__get__x() + 1, __get__y() + 1, w - 2, h - 2, 4, _local4, 40);
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, "radial");
                    drawRoundRect(__get__x() + 2, __get__y() + 2, w - 4, h - 4, 3, _local4, 40);
                    drawRoundRect(__get__x() + 3, __get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                    drawRoundRect(__get__x() + 3, __get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
                    break;
                case "truedisabled" : 
                    drawRoundRect(0, 0, w, h, 5, 13159628, 100);
                    drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
                    drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
                    drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
            }
        }
        static function classConstruct() {
            mx.core.ext.UIObjectExtensions.Extensions();
            _global.skinRegistry.ButtonSkin = true;
            return(true);
        }
        static var symbolName = "ButtonSkin";
        static var symbolOwner = mx.skins.halo.ButtonSkin;
        var className = "ButtonSkin";
        var backgroundColorName = "buttonColor";
        static var classConstructed = classConstruct();
        static var UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
    }
﻿
//----------------------------------------------------------------------
//Symbol 23 Button
//----------------------------------------------------------------------
on (keyPress "<Tab>") {
    this.tabHandler();
}
﻿
//----------------------------------------------------------------------
//Symbol 1 MovieClip [__Packages.mx.core.UIObject] Frame 0
//----------------------------------------------------------------------
    class mx.core.UIObject extends MovieClip
    {
        var _width, _height, _x, _y, _parent, _minHeight, _minWidth, _visible, dispatchEvent, _xscale, _yscale, methodTable, onEnterFrame, tfList, __width, __height, moveTo, lineTo, createTextField, attachMovie, buildDepthTable, findNextAvailableDepth, idNames, childrenCreated, _name, createAccessibilityImplementation, _endInit, validateNow, hasOwnProperty, initProperties, stylecache, className, ignoreClassStyleDeclaration, _tf, fontFamily, fontSize, color, marginLeft, marginRight, fontStyle, fontWeight, textAlign, textIndent, textDecoration, embedFonts, styleName, enabled;
        function UIObject () {
            super();
            constructObject();
        }
        function get width() {
            return(_width);
        }
        function get height() {
            return(_height);
        }
        function get left() {
            return(_x);
        }
        function get x() {
            return(_x);
        }
        function get top() {
            return(_y);
        }
        function get y() {
            return(_y);
        }
        function get right() {
            return(_parent.width - (_x + width));
        }
        function get bottom() {
            return(_parent.height - (_y + height));
        }
        function getMinHeight(Void) {
            return(_minHeight);
        }
        function setMinHeight(h) {
            _minHeight = h;
        }
        function get minHeight() {
            return(getMinHeight());
        }
        function set minHeight(h) {
            setMinHeight(h);
            //return(minHeight);
        }
        function getMinWidth(Void) {
            return(_minWidth);
        }
        function setMinWidth(w) {
            _minWidth = w;
        }
        function get minWidth() {
            return(getMinWidth());
        }
        function set minWidth(w) {
            setMinWidth(w);
            //return(minWidth);
        }
        function setVisible(x, noEvent) {
            if (x != _visible) {
                _visible = x;
                if (noEvent != true) {
                    dispatchEvent({type:(x ? "reveal" : "hide")});
                }
            }
        }
        function get visible() {
            return(_visible);
        }
        function set visible(x) {
            setVisible(x, false);
            //return(visible);
        }
        function get scaleX() {
            return(_xscale);
        }
        function set scaleX(x) {
            _xscale = x;
            //return(scaleX);
        }
        function get scaleY() {
            return(_yscale);
        }
        function set scaleY(y) {
            _yscale = y;
            //return(scaleY);
        }
        function doLater(obj, fn) {
            if (methodTable == undefined) {
                methodTable = new Array();
            }
            methodTable.push({obj:obj, fn:fn});
            onEnterFrame = doLaterDispatcher;
        }
        function doLaterDispatcher(Void) {
            delete onEnterFrame;
            if (invalidateFlag) {
                redraw();
            }
            var _local3 = methodTable;
            methodTable = new Array();
            if (_local3.length > 0) {
                var _local2;
                while (_local2 = _local3.shift() , _local2 != undefined) {
                    _local2.obj[_local2.fn]();
                }
            }
        }
        function cancelAllDoLaters(Void) {
            delete onEnterFrame;
            methodTable = new Array();
        }
        function invalidate(Void) {
            invalidateFlag = true;
            onEnterFrame = doLaterDispatcher;
        }
        function invalidateStyle(Void) {
            invalidate();
        }
        function redraw(bAlways) {
            if (invalidateFlag || (bAlways)) {
                invalidateFlag = false;
                var _local2;
                for (_local2 in tfList) {
                    tfList[_local2].draw();
                }
                draw();
                dispatchEvent({type:"draw"});
            }
        }
        function draw(Void) {
        }
        function move(x, y, noEvent) {
            var _local3 = _x;
            var _local2 = _y;
            _x = x;
            _y = y;
            if (noEvent != true) {
                dispatchEvent({type:"move", oldX:_local3, oldY:_local2});
            }
        }
        function setSize(w, h, noEvent) {
            var _local2 = __width;
            var _local3 = __height;
            __width = w;
            __height = h;
            size();
            if (noEvent != true) {
                dispatchEvent({type:"resize", oldWidth:_local2, oldHeight:_local3});
            }
        }
        function size(Void) {
            _width = __width;
            _height = __height;
        }
        function drawRect(x1, y1, x2, y2) {
            moveTo(x1, y1);
            lineTo(x2, y1);
            lineTo(x2, y2);
            lineTo(x1, y2);
            lineTo(x1, y1);
        }
        function createLabel(name, depth, text) {
            createTextField(name, depth, 0, 0, 0, 0);
            var _local2 = this[name];
            _local2._color = textColorList;
            _local2._visible = false;
            _local2.__text = text;
            if (tfList == undefined) {
                tfList = new Object();
            }
            tfList[name] = _local2;
            _local2.invalidateStyle();
            invalidate();
            _local2.styleName = this;
            return(_local2);
        }
        function createObject(linkageName, id, depth, initobj) {
            return(attachMovie(linkageName, id, depth, initobj));
        }
        function createClassObject(className, id, depth, initobj) {
            var _local3 = className.symbolName == undefined;
            if (_local3) {
                Object.registerClass(className.symbolOwner.symbolName, className);
            }
            var _local4 = createObject(className.symbolOwner.symbolName, id, depth, initobj);
            if (_local3) {
                Object.registerClass(className.symbolOwner.symbolName, className.symbolOwner);
            }
            return(_local4);
        }
        function createEmptyObject(id, depth) {
            return(createClassObject(mx.core.UIObject, id, depth));
        }
        function destroyObject(id) {
            var _local2 = this[id];
            if (_local2.getDepth() < 0) {
                var _local4 = buildDepthTable();
                var _local5 = findNextAvailableDepth(0, _local4, "up");
                var _local3 = _local5;
                _local2.swapDepths(_local3);
            }
            _local2.removeMovieClip();
            delete this[id];
        }
        function getSkinIDName(tag) {
            return(idNames[tag]);
        }
        function setSkin(tag, linkageName, initObj) {
            if (_global.skinRegistry[linkageName] == undefined) {
                mx.skins.SkinElement.registerElement(linkageName, mx.skins.SkinElement);
            }
            return(createObject(linkageName, getSkinIDName(tag), tag, initObj));
        }
        function createSkin(tag) {
            var _local2 = getSkinIDName(tag);
            createEmptyObject(_local2, tag);
            return(this[_local2]);
        }
        function createChildren(Void) {
        }
        function _createChildren(Void) {
            createChildren();
            childrenCreated = true;
        }
        function constructObject(Void) {
            if (_name == undefined) {
                return(undefined);
            }
            init();
            _createChildren();
            createAccessibilityImplementation();
            _endInit();
            if (validateNow) {
                redraw(true);
            } else {
                invalidate();
            }
        }
        function initFromClipParameters(Void) {
            var _local4 = false;
            var _local2;
            for (_local2 in clipParameters) {
                if (hasOwnProperty(_local2)) {
                    _local4 = true;
                    this["def_" + _local2] = this[_local2];
                    delete this[_local2];
                }
            }
            if (_local4) {
                for (_local2 in clipParameters) {
                    var _local3 = this["def_" + _local2];
                    if (_local3 != undefined) {
                        this[_local2] = _local3;
                    }
                }
            }
        }
        function init(Void) {
            __width = _width;
            __height = _height;
            if (initProperties == undefined) {
                initFromClipParameters();
            } else {
                initProperties();
            }
            if (_global.cascadingStyles == true) {
                stylecache = new Object();
            }
        }
        function getClassStyleDeclaration(Void) {
            var _local4 = this;
            var _local3 = className;
            while (_local3 != undefined) {
                if (ignoreClassStyleDeclaration[_local3] == undefined) {
                    if (_global.styles[_local3] != undefined) {
                        return(_global.styles[_local3]);
                    }
                }
                _local4 = _local4.__proto__;
                _local3 = _local4.className;
            }
        }
        function setColor(color) {
        }
        function __getTextFormat(tf, bAll) {
            var _local8 = stylecache.tf;
            if (_local8 != undefined) {
                var _local3;
                for (_local3 in mx.styles.StyleManager.TextFormatStyleProps) {
                    if (bAll || (mx.styles.StyleManager.TextFormatStyleProps[_local3])) {
                        if (tf[_local3] == undefined) {
                            tf[_local3] = _local8[_local3];
                        }
                    }
                }
                return(false);
            }
            var _local6 = false;
            for (var _local3 in mx.styles.StyleManager.TextFormatStyleProps) {
                if (bAll || (mx.styles.StyleManager.TextFormatStyleProps[_local3])) {
                    if (tf[_local3] == undefined) {
                        var _local5 = _tf[_local3];
                        if (_local5 != undefined) {
                            tf[_local3] = _local5;
                        } else if ((_local3 == "font") && (fontFamily != undefined)) {
                            tf[_local3] = fontFamily;
                        } else if ((_local3 == "size") && (fontSize != undefined)) {
                            tf[_local3] = fontSize;
                        } else if ((_local3 == "color") && (color != undefined)) {
                            tf[_local3] = color;
                        } else if ((_local3 == "leftMargin") && (marginLeft != undefined)) {
                            tf[_local3] = marginLeft;
                        } else if ((_local3 == "rightMargin") && (marginRight != undefined)) {
                            tf[_local3] = marginRight;
                        } else if ((_local3 == "italic") && (fontStyle != undefined)) {
                            tf[_local3] = fontStyle == _local3;
                        } else if ((_local3 == "bold") && (fontWeight != undefined)) {
                            tf[_local3] = fontWeight == _local3;
                        } else if ((_local3 == "align") && (textAlign != undefined)) {
                            tf[_local3] = textAlign;
                        } else if ((_local3 == "indent") && (textIndent != undefined)) {
                            tf[_local3] = textIndent;
                        } else if ((_local3 == "underline") && (textDecoration != undefined)) {
                            tf[_local3] = textDecoration == _local3;
                        } else if ((_local3 == "embedFonts") && (embedFonts != undefined)) {
                            tf[_local3] = embedFonts;
                        } else {
                            _local6 = true;
                        }
                    }
                }
            }
            if (_local6) {
                var _local9 = styleName;
                if (_local9 != undefined) {
                    if (typeof(_local9) != "string") {
                        _local6 = _local9.__getTextFormat(tf, true, this);
                    } else if (_global.styles[_local9] != undefined) {
                        _local6 = _global.styles[_local9].__getTextFormat(tf, true, this);
                    }
                }
            }
            if (_local6) {
                var _local10 = getClassStyleDeclaration();
                if (_local10 != undefined) {
                    _local6 = _local10.__getTextFormat(tf, true, this);
                }
            }
            if (_local6) {
                if (_global.cascadingStyles) {
                    if (_parent != undefined) {
                        _local6 = _parent.__getTextFormat(tf, false);
                    }
                }
            }
            if (_local6) {
                _local6 = _global.style.__getTextFormat(tf, true, this);
            }
            return(_local6);
        }
        function _getTextFormat(Void) {
            var _local2 = stylecache.tf;
            if (_local2 != undefined) {
                return(_local2);
            }
            _local2 = new TextFormat();
            __getTextFormat(_local2, true);
            stylecache.tf = _local2;
            if (enabled == false) {
                var _local3 = getStyle("disabledColor");
                _local2.color = _local3;
            }
            return(_local2);
        }
        function getStyleName(Void) {
            var _local2 = styleName;
            if (_local2 != undefined) {
                if (typeof(_local2) != "string") {
                    return(_local2.getStyleName());
                }
                return(_local2);
            }
            if (_parent != undefined) {
                return(_parent.getStyleName());
            }
            return(undefined);
        }
        function getStyle(styleProp) {
            var _local3;
            _global.getStyleCounter++;
            if (this[styleProp] != undefined) {
                return(this[styleProp]);
            }
            var _local6 = styleName;
            if (_local6 != undefined) {
                if (typeof(_local6) != "string") {
                    _local3 = _local6.getStyle(styleProp);
                } else {
                    var _local7 = _global.styles[_local6];
                    _local3 = _local7.getStyle(styleProp);
                }
            }
            if (_local3 != undefined) {
                return(_local3);
            }
            var _local7 = getClassStyleDeclaration();
            if (_local7 != undefined) {
                _local3 = _local7[styleProp];
            }
            if (_local3 != undefined) {
                return(_local3);
            }
            if (_global.cascadingStyles) {
                if (mx.styles.StyleManager.isInheritingStyle(styleProp) || (mx.styles.StyleManager.isColorStyle(styleProp))) {
                    var _local5 = stylecache;
                    if (_local5 != undefined) {
                        if (_local5[styleProp] != undefined) {
                            return(_local5[styleProp]);
                        }
                    }
                    if (_parent != undefined) {
                        _local3 = _parent.getStyle(styleProp);
                    } else {
                        _local3 = _global.style[styleProp];
                    }
                    if (_local5 != undefined) {
                        _local5[styleProp] = _local3;
                    }
                    return(_local3);
                }
            }
            if (_local3 == undefined) {
                _local3 = _global.style[styleProp];
            }
            return(_local3);
        }
        static function mergeClipParameters(o, p) {
            for (var _local3 in p) {
                o[_local3] = p[_local3];
            }
            return(true);
        }
        static var symbolName = "UIObject";
        static var symbolOwner = mx.core.UIObject;
        static var version = "2.0.2.126";
        static var textColorList = {color:1, disabledColor:1};
        var invalidateFlag = false;
        var lineWidth = 1;
        var lineColor = 0;
        var tabEnabled = false;
        var clipParameters = {visible:1, minHeight:1, minWidth:1, maxHeight:1, maxWidth:1, preferredHeight:1, preferredWidth:1};
    }
﻿
//----------------------------------------------------------------------
//Symbol 39 MovieClip [__Packages.mx.events.UIEventDispatcher] Frame 0
//----------------------------------------------------------------------
    class mx.events.UIEventDispatcher extends mx.events.EventDispatcher
    {
        var dispatchQueue, owner, __sentLoadEvent, __origAddEventListener;
        function UIEventDispatcher () {
            super();
        }
        static function addKeyEvents(obj) {
            if (obj.keyHandler == undefined) {
                var _local1 = (obj.keyHandler = new Object());
                _local1.owner = obj;
                _local1.onKeyDown = _fEventDispatcher.onKeyDown;
                _local1.onKeyUp = _fEventDispatcher.onKeyUp;
            }
            Key.addListener(obj.keyHandler);
        }
        static function removeKeyEvents(obj) {
            Key.removeListener(obj.keyHandler);
        }
        static function addLoadEvents(obj) {
            if (obj.onLoad == undefined) {
                obj.onLoad = _fEventDispatcher.onLoad;
                obj.onUnload = _fEventDispatcher.onUnload;
                if (obj.getBytesTotal() == obj.getBytesLoaded()) {
                    obj.doLater(obj, "onLoad");
                }
            }
        }
        static function removeLoadEvents(obj) {
            delete obj.onLoad;
            delete obj.onUnload;
        }
        static function initialize(obj) {
            if (_fEventDispatcher == undefined) {
                _fEventDispatcher = new mx.events.UIEventDispatcher();
            }
            obj.addEventListener = _fEventDispatcher.__addEventListener;
            obj.__origAddEventListener = _fEventDispatcher.addEventListener;
            obj.removeEventListener = _fEventDispatcher.removeEventListener;
            obj.dispatchEvent = _fEventDispatcher.dispatchEvent;
            obj.dispatchQueue = _fEventDispatcher.dispatchQueue;
        }
        function dispatchEvent(eventObj) {
            if (eventObj.target == undefined) {
                eventObj.target = this;
            }
            this[eventObj.type + "Handler"](eventObj);
            dispatchQueue(mx.events.EventDispatcher, eventObj);
            dispatchQueue(this, eventObj);
        }
        function onKeyDown(Void) {
            owner.dispatchEvent({type:"keyDown", code:Key.getCode(), ascii:Key.getAscii(), shiftKey:Key.isDown(16), ctrlKey:Key.isDown(17)});
        }
        function onKeyUp(Void) {
            owner.dispatchEvent({type:"keyUp", code:Key.getCode(), ascii:Key.getAscii(), shiftKey:Key.isDown(16), ctrlKey:Key.isDown(17)});
        }
        function onLoad(Void) {
            if (__sentLoadEvent != true) {
                dispatchEvent({type:"load"});
            }
            __sentLoadEvent = true;
        }
        function onUnload(Void) {
            dispatchEvent({type:"unload"});
        }
        function __addEventListener(event, handler) {
            __origAddEventListener(event, handler);
            var _local3 = lowLevelEvents;
            for (var _local5 in _local3) {
                if (mx.events.UIEventDispatcher[_local5][event] != undefined) {
                    var _local2 = _local3[_local5][0];
                    mx.events.UIEventDispatcher[_local2](this);
                }
            }
        }
        function removeEventListener(event, handler) {
            var _local6 = "__q_" + event;
            mx.events.EventDispatcher._removeEventListener(this[_local6], event, handler);
            if (this[_local6].length == 0) {
                var _local2 = lowLevelEvents;
                for (var _local5 in _local2) {
                    if (mx.events.UIEventDispatcher[_local5][event] != undefined) {
                        var _local3 = _local2[_local5][1];
                        mx.events.UIEventDispatcher[_local2[_local5][1]](this);
                    }
                }
            }
        }
        static var keyEvents = {keyDown:1, keyUp:1};
        static var loadEvents = {load:1, unload:1};
        static var lowLevelEvents = {keyEvents:["addKeyEvents", "removeKeyEvents"], loadEvents:["addLoadEvents", "removeLoadEvents"]};
        static var _fEventDispatcher = undefined;
    }
﻿
//----------------------------------------------------------------------
//Symbol 44 MovieClip [__Packages.mx.managers.SystemManager] Frame 0
//----------------------------------------------------------------------
    class mx.managers.SystemManager
    {
        static var _xAddEventListener, addEventListener, __addEventListener, _xRemoveEventListener, removeEventListener, __removeEventListener, form, __screen, dispatchEvent;
        function SystemManager () {
        }
        static function init(Void) {
            if (_initialized == false) {
                _initialized = true;
                mx.events.EventDispatcher.initialize(mx.managers.SystemManager);
                Mouse.addListener(mx.managers.SystemManager);
                Stage.addListener(mx.managers.SystemManager);
                _xAddEventListener = addEventListener;
                addEventListener = __addEventListener;
                _xRemoveEventListener = removeEventListener;
                removeEventListener = __removeEventListener;
            }
        }
        static function addFocusManager(f) {
            form = f;
            f.focusManager.activate();
        }
        static function removeFocusManager(f) {
        }
        static function onMouseDown(Void) {
            var _local1 = form;
            _local1.focusManager._onMouseDown();
        }
        static function onResize(Void) {
            var _local7 = Stage.width;
            var _local6 = Stage.height;
            var _local9 = _global.origWidth;
            var _local8 = _global.origHeight;
            var _local3 = Stage.align;
            var _local5 = (_local9 - _local7) / 2;
            var _local4 = (_local8 - _local6) / 2;
            if (_local3 == "T") {
                _local4 = 0;
            } else if (_local3 == "B") {
                _local4 = _local8 - _local6;
            } else if (_local3 == "L") {
                _local5 = 0;
            } else if (_local3 == "R") {
                _local5 = _local9 - _local7;
            } else if (_local3 == "LT") {
                _local4 = 0;
                _local5 = 0;
            } else if (_local3 == "TR") {
                _local4 = 0;
                _local5 = _local9 - _local7;
            } else if (_local3 == "LB") {
                _local4 = _local8 - _local6;
                _local5 = 0;
            } else if (_local3 == "RB") {
                _local4 = _local8 - _local6;
                _local5 = _local9 - _local7;
            }
            if (__screen == undefined) {
                __screen = new Object();
            }
            __screen.x = _local5;
            __screen.y = _local4;
            __screen.width = _local7;
            __screen.height = _local6;
            _root.focusManager.relocate();
            dispatchEvent({type:"resize"});
        }
        static function get screen() {
            init();
            if (__screen == undefined) {
                onResize();
            }
            return(__screen);
        }
        static var _initialized = false;
        static var idleFrames = 0;
        static var isMouseDown = false;
        static var forms = new Array();
    }
﻿
//----------------------------------------------------------------------
//Symbol 24 MovieClip Frame 1
//----------------------------------------------------------------------
    #initclip 29
    Object.registerClass("FocusManager", mx.managers.FocusManager);
    if (_root.focusManager == undefined) {
        _root.createClassObject(mx.managers.FocusManager, "focusManager", mx.managers.DepthManager.highestDepth--);
    }
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 43 MovieClip [__Packages.mx.managers.DepthManager] Frame 0
//----------------------------------------------------------------------
    class mx.managers.DepthManager
    {
        var _childCounter, createClassObject, createObject, _parent, swapDepths, _topmost, getDepth;
        function DepthManager () {
            MovieClip.prototype.createClassChildAtDepth = createClassChildAtDepth;
            MovieClip.prototype.createChildAtDepth = createChildAtDepth;
            MovieClip.prototype.setDepthTo = setDepthTo;
            MovieClip.prototype.setDepthAbove = setDepthAbove;
            MovieClip.prototype.setDepthBelow = setDepthBelow;
            MovieClip.prototype.findNextAvailableDepth = findNextAvailableDepth;
            MovieClip.prototype.shuffleDepths = shuffleDepths;
            MovieClip.prototype.getDepthByFlag = getDepthByFlag;
            MovieClip.prototype.buildDepthTable = buildDepthTable;
            _global.ASSetPropFlags(MovieClip.prototype, "createClassChildAtDepth", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "createChildAtDepth", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "setDepthTo", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "setDepthAbove", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "setDepthBelow", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "findNextAvailableDepth", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "shuffleDepths", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "getDepthByFlag", 1);
            _global.ASSetPropFlags(MovieClip.prototype, "buildDepthTable", 1);
        }
        static function sortFunction(a, b) {
            if (a.getDepth() > b.getDepth()) {
                return(1);
            }
            return(-1);
        }
        static function test(depth) {
            if (depth == reservedDepth) {
                return(false);
            }
            return(true);
        }
        static function createClassObjectAtDepth(className, depthSpace, initObj) {
            var _local1;
            switch (depthSpace) {
                case kCursor : 
                    _local1 = holder.createClassChildAtDepth(className, kTopmost, initObj);
                    break;
                case kTooltip : 
                    _local1 = holder.createClassChildAtDepth(className, kTop, initObj);
                    break;
            }
            return(_local1);
        }
        static function createObjectAtDepth(linkageName, depthSpace, initObj) {
            var _local1;
            switch (depthSpace) {
                case kCursor : 
                    _local1 = holder.createChildAtDepth(linkageName, kTopmost, initObj);
                    break;
                case kTooltip : 
                    _local1 = holder.createChildAtDepth(linkageName, kTop, initObj);
                    break;
            }
            return(_local1);
        }
        function createClassChildAtDepth(className, depthFlag, initObj) {
            if (_childCounter == undefined) {
                _childCounter = 0;
            }
            var _local3 = buildDepthTable();
            var _local2 = getDepthByFlag(depthFlag, _local3);
            var _local6 = "down";
            if (depthFlag == kBottom) {
                _local6 = "up";
            }
            var _local5;
            if (_local3[_local2] != undefined) {
                _local5 = _local2;
                _local2 = findNextAvailableDepth(_local2, _local3, _local6);
            }
            var _local4 = createClassObject(className, "depthChild" + (_childCounter++), _local2, initObj);
            if (_local5 != undefined) {
                _local3[_local2] = _local4;
                shuffleDepths(_local4, _local5, _local3, _local6);
            }
            if (depthFlag == kTopmost) {
                _local4._topmost = true;
            }
            return(_local4);
        }
        function createChildAtDepth(linkageName, depthFlag, initObj) {
            if (_childCounter == undefined) {
                _childCounter = 0;
            }
            var _local3 = buildDepthTable();
            var _local2 = getDepthByFlag(depthFlag, _local3);
            var _local6 = "down";
            if (depthFlag == kBottom) {
                _local6 = "up";
            }
            var _local5;
            if (_local3[_local2] != undefined) {
                _local5 = _local2;
                _local2 = findNextAvailableDepth(_local2, _local3, _local6);
            }
            var _local4 = createObject(linkageName, "depthChild" + (_childCounter++), _local2, initObj);
            if (_local5 != undefined) {
                _local3[_local2] = _local4;
                shuffleDepths(_local4, _local5, _local3, _local6);
            }
            if (depthFlag == kTopmost) {
                _local4._topmost = true;
            }
            return(_local4);
        }
        function setDepthTo(depthFlag) {
            var _local2 = _parent.buildDepthTable();
            var _local3 = _parent.getDepthByFlag(depthFlag, _local2);
            if (_local2[_local3] != undefined) {
                shuffleDepths(this, _local3, _local2, undefined);
            } else {
                swapDepths(_local3);
            }
            if (depthFlag == kTopmost) {
                _topmost = true;
            } else {
                delete _topmost;
            }
        }
        function setDepthAbove(targetInstance) {
            if (targetInstance._parent != _parent) {
                return(undefined);
            }
            var _local2 = targetInstance.getDepth() + 1;
            var _local3 = _parent.buildDepthTable();
            if ((_local3[_local2] != undefined) && (getDepth() < _local2)) {
                _local2 = _local2 - 1;
            }
            if (_local2 > highestDepth) {
                _local2 = highestDepth;
            }
            if (_local2 == highestDepth) {
                _parent.shuffleDepths(this, _local2, _local3, "down");
            } else if (_local3[_local2] != undefined) {
                _parent.shuffleDepths(this, _local2, _local3, undefined);
            } else {
                swapDepths(_local2);
            }
        }
        function setDepthBelow(targetInstance) {
            if (targetInstance._parent != _parent) {
                return(undefined);
            }
            var _local6 = targetInstance.getDepth() - 1;
            var _local3 = _parent.buildDepthTable();
            if ((_local3[_local6] != undefined) && (getDepth() > _local6)) {
                _local6 = _local6 + 1;
            }
            var _local4 = lowestDepth + numberOfAuthortimeLayers;
            var _local5;
            for (_local5 in _local3) {
                var _local2 = _local3[_local5];
                if (_local2._parent != undefined) {
                    _local4 = Math.min(_local4, _local2.getDepth());
                }
            }
            if (_local6 < _local4) {
                _local6 = _local4;
            }
            if (_local6 == _local4) {
                _parent.shuffleDepths(this, _local6, _local3, "up");
            } else if (_local3[_local6] != undefined) {
                _parent.shuffleDepths(this, _local6, _local3, undefined);
            } else {
                swapDepths(_local6);
            }
        }
        function findNextAvailableDepth(targetDepth, depthTable, direction) {
            var _local5 = lowestDepth + numberOfAuthortimeLayers;
            if (targetDepth < _local5) {
                targetDepth = _local5;
            }
            if (depthTable[targetDepth] == undefined) {
                return(targetDepth);
            }
            var _local2 = targetDepth;
            var _local1 = targetDepth;
            if (direction == "down") {
                while (depthTable[_local1] != undefined) {
                    _local1--;
                }
                return(_local1);
            }
            while (depthTable[_local2] != undefined) {
                _local2++;
            }
            return(_local2);
        }
        function shuffleDepths(subject, targetDepth, depthTable, direction) {
            var _local9 = lowestDepth + numberOfAuthortimeLayers;
            var _local8 = _local9;
            var _local5;
            for (_local5 in depthTable) {
                var _local7 = depthTable[_local5];
                if (_local7._parent != undefined) {
                    _local9 = Math.min(_local9, _local7.getDepth());
                }
            }
            if (direction == undefined) {
                if (subject.getDepth() > targetDepth) {
                    direction = "up";
                } else {
                    direction = "down";
                }
            }
            var _local1 = new Array();
            for (_local5 in depthTable) {
                var _local7 = depthTable[_local5];
                if (_local7._parent != undefined) {
                    _local1.push(_local7);
                }
            }
            _local1.sort(sortFunction);
            if (direction == "up") {
                var _local3;
                var _local11;
                do {
                    if (_local1.length <= 0) { 
                        break;
                    }
                    _local3 = _local1.pop();
                } while  (_local3 != subject);
                do {
                    if (_local1.length <= 0) { 
                        break;
                    }
                    _local11 = subject.getDepth();
                    _local3 = _local1.pop();
                    var _local4 = _local3.getDepth();
                    if (_local11 > (_local4 + 1)) {
                        if (_local4 >= 0) {
                            subject.swapDepths(_local4 + 1);
                        } else if ((_local11 > _local8) && (_local4 < _local8)) {
                            subject.swapDepths(_local8);
                        }
                    }
                    subject.swapDepths(_local3);
                } while  (_local4 != targetDepth);
            } else if (direction == "down") {
                var _local3;
                do {
                    if (_local1.length <= 0) { 
                        break;
                    }
                    _local3 = _local1.shift();
                } while  (_local3 != subject);
                do {
                    if (_local1.length <= 0) { 
                        break;
                    }
                    var _local11 = _local3.getDepth();
                    _local3 = _local1.shift();
                    var _local4 = _local3.getDepth();
                    if ((_local11 < (_local4 - 1)) && (_local4 > 0)) {
                        subject.swapDepths(_local4 - 1);
                    }
                    subject.swapDepths(_local3);
                } while  (_local4 != targetDepth);
            }
        }
        function getDepthByFlag(depthFlag, depthTable) {
            var _local2 = 0;
            if ((depthFlag == kTop) || (depthFlag == kNotopmost)) {
                var _local5 = 0;
                var _local7 = false;
                var _local8;
                for (_local8 in depthTable) {
                    var _local9 = depthTable[_local8];
                    var _local3 = typeof(_local9);
                    if ((_local3 == "movieclip") || ((_local3 == "object") && (_local9.__getTextFormat != undefined))) {
                        if (_local9.getDepth() <= highestDepth) {
                            if (!_local9._topmost) {
                                _local2 = Math.max(_local2, _local9.getDepth());
                            } else if (!_local7) {
                                _local5 = _local9.getDepth();
                                _local7 = true;
                            } else {
                                _local5 = Math.min(_local5, _local9.getDepth());
                            }
                        }
                    }
                }
                _local2 = _local2 + 20;
                if (_local7) {
                    if (_local2 >= _local5) {
                        _local2 = _local5 - 1;
                    }
                }
            } else if (depthFlag == kBottom) {
                for (var _local8 in depthTable) {
                    var _local9 = depthTable[_local8];
                    var _local3 = typeof(_local9);
                    if ((_local3 == "movieclip") || ((_local3 == "object") && (_local9.__getTextFormat != undefined))) {
                        if (_local9.getDepth() <= highestDepth) {
                            _local2 = Math.min(_local2, _local9.getDepth());
                        }
                    }
                }
                _local2 = _local2 - 20;
            } else if (depthFlag == kTopmost) {
                for (var _local8 in depthTable) {
                    var _local9 = depthTable[_local8];
                    var _local3 = typeof(_local9);
                    if ((_local3 == "movieclip") || ((_local3 == "object") && (_local9.__getTextFormat != undefined))) {
                        if (_local9.getDepth() <= highestDepth) {
                            _local2 = Math.max(_local2, _local9.getDepth());
                        }
                    }
                }
                _local2 = _local2 + 100;
            }
            if (_local2 >= highestDepth) {
                _local2 = highestDepth;
            }
            var _local6 = lowestDepth + numberOfAuthortimeLayers;
            for (var _local9 in depthTable) {
                var _local4 = depthTable[_local9];
                if (_local4._parent != undefined) {
                    _local6 = Math.min(_local6, _local4.getDepth());
                }
            }
            if (_local2 <= _local6) {
                _local2 = _local6;
            }
            return(_local2);
        }
        function buildDepthTable(Void) {
            var _local5 = new Array();
            var _local4;
            for (_local4 in this) {
                var _local2 = this[_local4];
                var _local3 = typeof(_local2);
                if ((_local3 == "movieclip") || ((_local3 == "object") && (_local2.__getTextFormat != undefined))) {
                    if (_local2._parent == this) {
                        _local5[_local2.getDepth()] = _local2;
                    }
                }
            }
            return(_local5);
        }
        static var reservedDepth = 1048575;
        static var highestDepth = 1048574;
        static var lowestDepth = -16383;
        static var numberOfAuthortimeLayers = 383;
        static var kCursor = 101;
        static var kTooltip = 102;
        static var kTop = 201;
        static var kBottom = 202;
        static var kTopmost = 203;
        static var kNotopmost = 204;
        static var holder = _root.createEmptyMovieClip("reserved", reservedDepth);
        static var __depthManager = new mx.managers.DepthManager();
    }
﻿
//----------------------------------------------------------------------
//Symbol 28 MovieClip [UIComponent] Frame 1
//----------------------------------------------------------------------
    #initclip 33
    Object.registerClass("UIComponent", mx.core.UIComponent);
    #endinitclip

    stop();
﻿
//----------------------------------------------------------------------
//Symbol 13 MovieClip [BrdrBlk] Frame 1
//----------------------------------------------------------------------
    mx.skins.ColoredSkinElement.setColorStyle(this, "borderColor");

﻿
//----------------------------------------------------------------------
//Symbol 30 MovieClip [Border] Frame 1
//----------------------------------------------------------------------
    #initclip 35
    Object.registerClass("Border", mx.skins.Border);
    #endinitclip

    stop();
﻿
//----------------------------------------------------------------------
//Symbol 26 MovieClip [FocusManager] Frame 1
//----------------------------------------------------------------------
    #initclip 31
    Object.registerClass("FocusManager", mx.managers.FocusManager);
    #endinitclip

    stop();

﻿
//----------------------------------------------------------------------
//Symbol 45 MovieClip [__Packages.mx.managers.FocusManager] Frame 0
//----------------------------------------------------------------------
    class mx.managers.FocusManager extends mx.core.UIComponent
    {
        var __defaultPushButton, defPushButton, form, move, tabEnabled, _width, _height, _x, _y, _alpha, _parent, tabCapture, watch, lastMouse, _visible, lastFocus, doLater, lastSelFocus, cancelAllDoLaters, _searchKey, _lastTarget, _firstNode, _nextIsNext, _nextNode, _lastx, _prevNode, _needPrev, _foundList, _prevObj, _nextObj, _firstObj, _lastObj, _lastNode, lastTabFocus, findFocusFromObject;
        function FocusManager () {
            super();
        }
        function get defaultPushButton() {
            return(__defaultPushButton);
        }
        function set defaultPushButton(x) {
            if (x != __defaultPushButton) {
                __defaultPushButton.__set__emphasized(false);
                __defaultPushButton = x;
                defPushButton = x;
                x.__set__emphasized(true);
            }
            //return(defaultPushButton);
        }
        function getMaxTabIndex(o) {
            var _local3 = 0;
            var _local6;
            for (_local6 in o) {
                var _local2 = o[_local6];
                if (_local2._parent == o) {
                    if (_local2.tabIndex != undefined) {
                        if (_local2.tabIndex > _local3) {
                            _local3 = _local2.tabIndex;
                        }
                    }
                    if (_local2.tabChildren == true) {
                        var _local4 = getMaxTabIndex(_local2);
                        if (_local4 > _local3) {
                            _local3 = _local4;
                        }
                    }
                }
            }
            return(_local3);
        }
        function getNextTabIndex(Void) {
            return(getMaxTabIndex(form) + 1);
        }
        function get nextTabIndex() {
            return(getNextTabIndex());
        }
        function relocate(Void) {
            var _local2 = mx.managers.SystemManager.__get__screen();
            move(_local2.x - 1, _local2.y - 1);
        }
        function init(Void) {
            super.init();
            tabEnabled = false;
            _width = (_height = 1);
            _x = (_y = -1);
            _alpha = 0;
            _parent.focusManager = this;
            _parent.tabChildren = true;
            _parent.tabEnabled = false;
            form = _parent;
            _parent.addEventListener("hide", this);
            _parent.addEventListener("reveal", this);
            mx.managers.SystemManager.init();
            mx.managers.SystemManager.addFocusManager(form);
            tabCapture.tabIndex = 0;
            watch("enabled", enabledChanged);
            Selection.addListener(this);
            lastMouse = new Object();
            _global.ASSetPropFlags(_parent, "focusManager", 1);
            _global.ASSetPropFlags(_parent, "tabChildren", 1);
            _global.ASSetPropFlags(_parent, "tabEnabled", 1);
        }
        function enabledChanged(id, oldValue, newValue) {
            _visible = newValue;
            return(newValue);
        }
        function activate(Void) {
            Key.addListener(this);
            activated = (_visible = true);
            if (lastFocus != undefined) {
                bNeedFocus = true;
                if (!mx.managers.SystemManager.isMouseDown) {
                    doLater(this, "restoreFocus");
                }
            }
        }
        function deactivate(Void) {
            Key.removeListener(this);
            activated = (_visible = false);
            var _local2 = getSelectionFocus();
            var _local3 = getActualFocus(_local2);
            if (isOurFocus(_local3)) {
                lastSelFocus = _local2;
                lastFocus = _local3;
            }
            cancelAllDoLaters();
        }
        function isOurFocus(o) {
            if (o.focusManager == this) {
                return(true);
            }
            while (o != undefined) {
                if (o.focusManager != undefined) {
                    return(false);
                }
                if (o._parent == _parent) {
                    return(true);
                }
                o = o._parent;
            }
            return(false);
        }
        function onSetFocus(o, n) {
            if (n == null) {
                if (activated) {
                    bNeedFocus = true;
                }
            } else {
                var _local2 = getFocus();
                if (isOurFocus(_local2)) {
                    bNeedFocus = false;
                    lastFocus = _local2;
                    lastSelFocus = n;
                }
            }
        }
        function restoreFocus(Void) {
            var _local2 = lastSelFocus.hscroll;
            if (_local2 != undefined) {
                var _local5 = lastSelFocus.scroll;
                var _local4 = lastSelFocus.background;
            }
            lastFocus.setFocus();
            var _local3 = Selection;
            Selection.setSelection(_local3.lastBeginIndex, _local3.lastEndIndex);
            if (_local2 != undefined) {
                lastSelFocus.scroll = _local5;
                lastSelFocus.hscroll = _local2;
                lastSelFocus.background = _local4;
            }
        }
        function onUnload(Void) {
            mx.managers.SystemManager.removeFocusManager(form);
        }
        function setFocus(o) {
            if (o == null) {
                Selection.setFocus(null);
            } else if (o.setFocus == undefined) {
                Selection.setFocus(o);
            } else {
                o.setFocus();
            }
        }
        function getActualFocus(o) {
            var _local1 = o._parent;
            while (_local1 != undefined) {
                if (_local1.focusTextField != undefined) {
                    while (_local1.focusTextField != undefined) {
                        o = _local1;
                        _local1 = _local1._parent;
                        if (_local1 == undefined) {
                            return(undefined);
                        }
                        if (_local1.focusTextField == undefined) {
                            return(o);
                        }
                    }
                }
                if (_local1.tabEnabled != true) {
                    return(o);
                }
                o = _local1;
                _local1 = o._parent;
            }
            return(undefined);
        }
        function getSelectionFocus() {
            var m = Selection.getFocus();
            var o = eval (m);
            return(o);
        }
        function getFocus(Void) {
            var _local2 = getSelectionFocus();
            return(getActualFocus(_local2));
        }
        function walkTree(p, index, groupName, dir, lookup, firstChild) {
            var _local5 = true;
            var _local11;
            for (_local11 in p) {
                var _local2 = p[_local11];
                if ((((_local2._parent == p) && (_local2.enabled != false)) && (_local2._visible != false)) && ((_local2.tabEnabled == true) || ((_local2.tabEnabled != false) && ((((((((_local2.onPress != undefined) || (_local2.onRelease != undefined)) || (_local2.onReleaseOutside != undefined)) || (_local2.onDragOut != undefined)) || (_local2.onDragOver != undefined)) || (_local2.onRollOver != undefined)) || (_local2.onRollOut != undefined)) || (_local2 instanceof TextField))))) {
                    if (_local2._searchKey == _searchKey) {
                        continue;
                    }
                    _local2._searchKey = _searchKey;
                    if (_local2 != _lastTarget) {
                        if (((_local2.groupName != undefined) || (groupName != undefined)) && (_local2.groupName == groupName)) {
                            continue;
                        }
                        if ((_local2 instanceof TextField) && (_local2.selectable == false)) {
                            continue;
                        }
                        if (_local5 || (((_local2.groupName != undefined) && (_local2.groupName == _firstNode.groupName)) && (_local2.selected == true))) {
                            if (firstChild) {
                                _firstNode = _local2;
                                firstChild = false;
                            }
                        }
                        if (_nextIsNext == true) {
                            if ((((_local2.groupName != undefined) && (_local2.groupName == _nextNode.groupName)) && (_local2.selected == true)) || ((_nextNode == undefined) && ((_local2.groupName == undefined) || ((_local2.groupName != undefined) && (_local2.groupName != groupName))))) {
                                _nextNode = _local2;
                            }
                        }
                        if ((_local2.groupName == undefined) || (groupName != _local2.groupName)) {
                            if (((_lastx.groupName != undefined) && (_local2.groupName == _lastx.groupName)) && (_lastx.selected == true)) {
                            } else {
                                _lastx = _local2;
                            }
                        }
                    } else {
                        _prevNode = _lastx;
                        _needPrev = false;
                        _nextIsNext = true;
                    }
                    if (_local2.tabIndex != undefined) {
                        if (_local2.tabIndex == index) {
                            if (_foundList[_local2._name] == undefined) {
                                if (_needPrev) {
                                    _prevObj = _local2;
                                    _needPrev = false;
                                }
                                _nextObj = _local2;
                            }
                        }
                        if (dir && (_local2.tabIndex > index)) {
                            if (((_nextObj == undefined) || ((_nextObj.tabIndex > _local2.tabIndex) && (((_local2.groupName == undefined) || (_nextObj.groupName == undefined)) || (_local2.groupName != _nextObj.groupName)))) || ((((_nextObj.groupName != undefined) && (_nextObj.groupName == _local2.groupName)) && (_nextObj.selected != true)) && ((_local2.selected == true) || (_nextObj.tabIndex > _local2.tabIndex)))) {
                                _nextObj = _local2;
                            }
                        } else if ((!dir) && (_local2.tabIndex < index)) {
                            if (((_prevObj == undefined) || ((_prevObj.tabIndex < _local2.tabIndex) && (((_local2.groupName == undefined) || (_prevObj.groupName == undefined)) || (_local2.groupName != _prevObj.groupName)))) || ((((_prevObj.groupName != undefined) && (_prevObj.groupName == _local2.groupName)) && (_prevObj.selected != true)) && ((_local2.selected == true) || (_prevObj.tabIndex < _local2.tabIndex)))) {
                                _prevObj = _local2;
                            }
                        }
                        if (((_firstObj == undefined) || ((_local2.tabIndex < _firstObj.tabIndex) && (((_local2.groupName == undefined) || (_firstObj.groupName == undefined)) || (_local2.groupName != _firstObj.groupName)))) || ((((_firstObj.groupName != undefined) && (_firstObj.groupName == _local2.groupName)) && (_firstObj.selected != true)) && ((_local2.selected == true) || (_local2.tabIndex < _firstObj.tabIndex)))) {
                            _firstObj = _local2;
                        }
                        if (((_lastObj == undefined) || ((_local2.tabIndex > _lastObj.tabIndex) && (((_local2.groupName == undefined) || (_lastObj.groupName == undefined)) || (_local2.groupName != _lastObj.groupName)))) || ((((_lastObj.groupName != undefined) && (_lastObj.groupName == _local2.groupName)) && (_lastObj.selected != true)) && ((_local2.selected == true) || (_local2.tabIndex > _lastObj.tabIndex)))) {
                            _lastObj = _local2;
                        }
                    }
                    if (_local2.tabChildren) {
                        getTabCandidateFromChildren(_local2, index, groupName, dir, _local5 && (firstChild));
                    }
                    _local5 = false;
                } else if (((_local2._parent == p) && (_local2.tabChildren == true)) && (_local2._visible != false)) {
                    if (_local2 == _lastTarget) {
                        if (_local2._searchKey == _searchKey) {
                            continue;
                        }
                        _local2._searchKey = _searchKey;
                        if (_prevNode == undefined) {
                            var _local3 = _lastx;
                            var _local7 = false;
                            while (_local3 != undefined) {
                                if (_local3 == _local2) {
                                    _local7 = true;
                                    break;
                                }
                                _local3 = _local3._parent;
                            }
                            if (_local7 == false) {
                                _prevNode = _lastx;
                            }
                        }
                        _needPrev = false;
                        if (_nextNode == undefined) {
                            _nextIsNext = true;
                        }
                    } else if (!((_local2.focusManager != undefined) && (_local2.focusManager._parent == _local2))) {
                        if (_local2._searchKey == _searchKey) {
                            continue;
                        }
                        _local2._searchKey = _searchKey;
                        getTabCandidateFromChildren(_local2, index, groupName, dir, _local5 && (firstChild));
                    }
                    _local5 = false;
                }
            }
            _lastNode = _lastx;
            if (lookup) {
                if (p._parent != undefined) {
                    if (p != _parent) {
                        if ((_prevNode == undefined) && (dir)) {
                            _needPrev = true;
                        } else if ((_nextNode == undefined) && (!dir)) {
                            _nextIsNext = false;
                        }
                        _lastTarget = _lastTarget._parent;
                        getTabCandidate(p._parent, index, groupName, dir, true);
                    }
                }
            }
        }
        function getTabCandidate(o, index, groupName, dir, firstChild) {
            var _local2;
            var _local3 = true;
            if (o == _parent) {
                _local2 = o;
                _local3 = false;
            } else {
                _local2 = o._parent;
                if (_local2 == undefined) {
                    _local2 = o;
                    _local3 = false;
                }
            }
            walkTree(_local2, index, groupName, dir, _local3, firstChild);
        }
        function getTabCandidateFromChildren(o, index, groupName, dir, firstChild) {
            walkTree(o, index, groupName, dir, false, firstChild);
        }
        function getFocusManagerFromObject(o) {
            while (o != undefined) {
                if (o.focusManager != undefined) {
                    return(o.focusManager);
                }
                o = o._parent;
            }
            return(undefined);
        }
        function tabHandler(Void) {
            bDrawFocus = true;
            var _local5 = getSelectionFocus();
            var _local4 = getActualFocus(_local5);
            if (_local4 != _local5) {
                _local5 = _local4;
            }
            if (getFocusManagerFromObject(_local5) != this) {
                _local5 == undefined;
            }
            if (_local5 == undefined) {
                _local5 = form;
            } else if (_local5.tabIndex != undefined) {
                if ((_foundList != undefined) || (_foundList.tabIndex != _local5.tabIndex)) {
                    _foundList = new Object();
                    _foundList.tabIndex = _local5.tabIndex;
                }
                _foundList[_local5._name] = _local5;
            }
            var _local3 = Key.isDown(16) != true;
            _searchKey = getTimer();
            _needPrev = true;
            _nextIsNext = false;
            _lastx = undefined;
            _firstNode = undefined;
            _lastNode = undefined;
            _nextNode = undefined;
            _prevNode = undefined;
            _firstObj = undefined;
            _lastObj = undefined;
            _nextObj = undefined;
            _prevObj = undefined;
            _lastTarget = _local5;
            var _local6 = _local5;
            getTabCandidate(_local6, ((_local5.tabIndex == undefined) ? 0 : (_local5.tabIndex)), _local5.groupName, _local3, true);
            var _local2;
            if (_local3) {
                if (_nextObj != undefined) {
                    _local2 = _nextObj;
                } else {
                    _local2 = _firstObj;
                }
            } else if (_prevObj != undefined) {
                _local2 = _prevObj;
            } else {
                _local2 = _lastObj;
            }
            if (_local2.tabIndex != _local5.tabIndex) {
                _foundList = new Object();
                _foundList.tabIndex = _local2.tabIndex;
                _foundList[_local2._name] = _local2;
            } else {
                if (_foundList == undefined) {
                    _foundList = new Object();
                    _foundList.tabIndex = _local2.tabIndex;
                }
                _foundList[_local2._name] = _local2;
            }
            if (_local2 == undefined) {
                if (_local3 == false) {
                    if (_nextNode != undefined) {
                        _local2 = _nextNode;
                    } else {
                        _local2 = _firstNode;
                    }
                } else if ((_prevNode == undefined) || (_local5 == form)) {
                    _local2 = _lastNode;
                } else {
                    _local2 = _prevNode;
                }
            }
            if (_local2 == undefined) {
                return(undefined);
            }
            lastTabFocus = _local2;
            setFocus(_local2);
            if (_local2.emphasized != undefined) {
                if (defPushButton != undefined) {
                    _local5 = defPushButton;
                    defPushButton = _local2;
                    _local5.emphasized = false;
                    _local2.emphasized = true;
                }
            } else if ((defPushButton != undefined) && (defPushButton != __defaultPushButton)) {
                _local5 = defPushButton;
                defPushButton = __defaultPushButton;
                _local5.emphasized = false;
                __defaultPushButton.__set__emphasized(true);
            }
        }
        function onKeyDown(Void) {
            mx.managers.SystemManager.idleFrames = 0;
            if (defaultPushButtonEnabled) {
                if (Key.getCode() == 13) {
                    if (defaultPushButton != undefined) {
                        doLater(this, "sendDefaultPushButtonEvent");
                    }
                }
            }
        }
        function sendDefaultPushButtonEvent(Void) {
            defPushButton.dispatchEvent({type:"click"});
        }
        function getMousedComponentFromChildren(x, y, o) {
            for (var _local7 in o) {
                var _local2 = o[_local7];
                if (((_local2._visible && (_local2.enabled)) && (_local2._parent == o)) && (_local2._searchKey != _searchKey)) {
                    _local2._searchKey = _searchKey;
                    if (_local2.hitTest(x, y, true)) {
                        if ((_local2.onPress != undefined) || (_local2.onRelease != undefined)) {
                            return(_local2);
                        }
                        var _local3 = getMousedComponentFromChildren(x, y, _local2);
                        if (_local3 != undefined) {
                            return(_local3);
                        }
                        return(_local2);
                    }
                }
            }
            return(undefined);
        }
        function mouseActivate(Void) {
            if (!bNeedFocus) {
                return(undefined);
            }
            _searchKey = getTimer();
            var _local2 = getMousedComponentFromChildren(lastMouse.x, lastMouse.y, form);
            if (_local2 instanceof mx.core.UIComponent) {
                return(undefined);
            }
            _local2 = findFocusFromObject(_local2);
            if (_local2 == lastFocus) {
                return(undefined);
            }
            if (_local2 == undefined) {
                doLater(this, "restoreFocus");
                return(undefined);
            }
            var _local3 = _local2.hscroll;
            if (_local3 != undefined) {
                var _local6 = _local2.scroll;
                var _local5 = _local2.background;
            }
            setFocus(_local2);
            var _local4 = Selection;
            Selection.setSelection(_local4.lastBeginIndex, _local4.lastEndIndex);
            if (_local3 != undefined) {
                _local2.scroll = _local6;
                _local2.hscroll = _local3;
                _local2.background = _local5;
            }
        }
        function _onMouseDown(Void) {
            bDrawFocus = false;
            if (lastFocus != undefined) {
                lastFocus.drawFocus(false);
            }
            mx.managers.SystemManager.idleFrames = 0;
            var _local3 = Selection;
            _local3.lastBeginIndex = Selection.getBeginIndex();
            _local3.lastEndIndex = Selection.getEndIndex();
            lastMouse.x = _root._xmouse;
            lastMouse.y = _root._ymouse;
            _root.localToGlobal(lastMouse);
        }
        function onMouseUp(Void) {
            if (_visible) {
                doLater(this, "mouseActivate");
            }
        }
        function handleEvent(e) {
            if (e.type == "reveal") {
                mx.managers.SystemManager.activate(form);
            } else {
                mx.managers.SystemManager.deactivate(form);
            }
        }
        static function enableFocusManagement() {
            if (!initialized) {
                initialized = true;
                Object.registerClass("FocusManager", mx.managers.FocusManager);
                if (_root.focusManager == undefined) {
                    _root.createClassObject(mx.managers.FocusManager, "focusManager", mx.managers.DepthManager.highestDepth--);
                }
            }
        }
        static var symbolName = "FocusManager";
        static var symbolOwner = mx.managers.FocusManager;
        static var version = "2.0.2.126";
        var className = "FocusManager";
        var bNeedFocus = false;
        var bDrawFocus = false;
        var defaultPushButtonEnabled = true;
        var activated = true;
        static var initialized = false;
        static var UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
    }
﻿
//----------------------------------------------------------------------
//Symbol 29 MovieClip [SimpleButton] Frame 1
//----------------------------------------------------------------------
    #initclip 34
    Object.registerClass("SimpleButton", mx.controls.SimpleButton);
    #endinitclip

    stop();

﻿
//----------------------------------------------------------------------
//Symbol 8 MovieClip [BrdrShdw] Frame 1
//----------------------------------------------------------------------
    mx.skins.ColoredSkinElement.setColorStyle(this, "shadowColor");

﻿
//----------------------------------------------------------------------
//Symbol 41 MovieClip [__Packages.mx.core.ext.UIObjectExtensions] Frame 0
//----------------------------------------------------------------------
    class mx.core.ext.UIObjectExtensions
    {
        function UIObjectExtensions () {
        }
        static function addGeometry(tf, ui) {
            tf.addProperty("width", ui.__get__width, null);
            tf.addProperty("height", ui.__get__height, null);
            tf.addProperty("left", ui.__get__left, null);
            tf.addProperty("x", ui.__get__x, null);
            tf.addProperty("top", ui.__get__top, null);
            tf.addProperty("y", ui.__get__y, null);
            tf.addProperty("right", ui.__get__right, null);
            tf.addProperty("bottom", ui.__get__bottom, null);
            tf.addProperty("visible", ui.__get__visible, ui.__set__visible);
        }
        static function Extensions() {
            if (bExtended == true) {
                return(true);
            }
            bExtended = true;
            var _local6 = mx.core.UIObject.prototype;
            var _local9 = mx.skins.SkinElement.prototype;
            addGeometry(_local9, _local6);
            mx.events.UIEventDispatcher.initialize(_local6);
            var _local13 = mx.skins.ColoredSkinElement;
            mx.styles.CSSTextStyles.addTextStyles(_local6);
            var _local5 = MovieClip.prototype;
            _local5.getTopLevel = _local6.getTopLevel;
            _local5.createLabel = _local6.createLabel;
            _local5.createObject = _local6.createObject;
            _local5.createClassObject = _local6.createClassObject;
            _local5.createEmptyObject = _local6.createEmptyObject;
            _local5.destroyObject = _local6.destroyObject;
            _global.ASSetPropFlags(_local5, "getTopLevel", 1);
            _global.ASSetPropFlags(_local5, "createLabel", 1);
            _global.ASSetPropFlags(_local5, "createObject", 1);
            _global.ASSetPropFlags(_local5, "createClassObject", 1);
            _global.ASSetPropFlags(_local5, "createEmptyObject", 1);
            _global.ASSetPropFlags(_local5, "destroyObject", 1);
            _local5.__getTextFormat = _local6.__getTextFormat;
            _local5._getTextFormat = _local6._getTextFormat;
            _local5.getStyleName = _local6.getStyleName;
            _local5.getStyle = _local6.getStyle;
            _global.ASSetPropFlags(_local5, "__getTextFormat", 1);
            _global.ASSetPropFlags(_local5, "_getTextFormat", 1);
            _global.ASSetPropFlags(_local5, "getStyleName", 1);
            _global.ASSetPropFlags(_local5, "getStyle", 1);
            var _local7 = TextField.prototype;
            addGeometry(_local7, _local6);
            _local7.addProperty("enabled", function () {
                return(this.__enabled);
            }, function (x) {
                this.__enabled = x;
                this.invalidateStyle();
            });
            _local7.move = _local9.move;
            _local7.setSize = _local9.setSize;
            _local7.invalidateStyle = function () {
                this.invalidateFlag = true;
            };
            _local7.draw = function () {
                if (this.invalidateFlag) {
                    this.invalidateFlag = false;
                    var _local2 = this._getTextFormat();
                    this.setTextFormat(_local2);
                    this.setNewTextFormat(_local2);
                    this.embedFonts = _local2.embedFonts == true;
                    if (this.__text != undefined) {
                        if (this.text == "") {
                            this.text = this.__text;
                        }
                        delete this.__text;
                    }
                    this._visible = true;
                }
            };
            _local7.setColor = function (color) {
                this.textColor = color;
            };
            _local7.getStyle = _local5.getStyle;
            _local7.__getTextFormat = _local6.__getTextFormat;
            _local7.setValue = function (v) {
                this.text = v;
            };
            _local7.getValue = function () {
                return(this.text);
            };
            _local7.addProperty("value", function () {
                return(this.getValue());
            }, function (v) {
                this.setValue(v);
            });
            _local7._getTextFormat = function () {
                var _local2 = this.stylecache.tf;
                if (_local2 != undefined) {
                    return(_local2);
                }
                _local2 = new TextFormat();
                this.__getTextFormat(_local2);
                this.stylecache.tf = _local2;
                if (this.__enabled == false) {
                    if (this.enabledColor == undefined) {
                        var _local4 = this.getTextFormat();
                        this.enabledColor = _local4.color;
                    }
                    var _local3 = this.getStyle("disabledColor");
                    _local2.color = _local3;
                } else if (this.enabledColor != undefined) {
                    if (_local2.color == undefined) {
                        _local2.color = this.enabledColor;
                    }
                }
                return(_local2);
            };
            _local7.getPreferredWidth = function () {
                this.draw();
                return(this.textWidth + 4);
            };
            _local7.getPreferredHeight = function () {
                this.draw();
                return(this.textHeight + 4);
            };
            TextFormat.prototype.getTextExtent2 = function (s) {
                var _local3 = _root._getTextExtent;
                if (_local3 == undefined) {
                    _root.createTextField("_getTextExtent", -2, 0, 0, 1000, 100);
                    _local3 = _root._getTextExtent;
                    _local3._visible = false;
                }
                _root._getTextExtent.text = s;
                var _local4 = this.align;
                this.align = "left";
                _root._getTextExtent.setTextFormat(this);
                this.align = _local4;
                return({width:_local3.textWidth, height:_local3.textHeight});
            };
            if (_global.style == undefined) {
                _global.style = new mx.styles.CSSStyleDeclaration();
                _global.cascadingStyles = true;
                _global.styles = new Object();
                _global.skinRegistry = new Object();
                if (_global._origWidth == undefined) {
                    _global.origWidth = Stage.width;
                    _global.origHeight = Stage.height;
                }
            }
            var _local4 = _root;
            while (_local4._parent != undefined) {
                _local4 = _local4._parent;
            }
            _local4.addProperty("width", function () {
                return(Stage.width);
            }, null);
            _local4.addProperty("height", function () {
                return(Stage.height);
            }, null);
            _global.ASSetPropFlags(_local4, "width", 1);
            _global.ASSetPropFlags(_local4, "height", 1);
            return(true);
        }
        static var bExtended = false;
        static var UIObjectExtended = Extensions();
        static var UIObjectDependency = mx.core.UIObject;
        static var SkinElementDependency = mx.skins.SkinElement;
        static var CSSTextStylesDependency = mx.styles.CSSTextStyles;
        static var UIEventDispatcherDependency = mx.events.UIEventDispatcher;
    }
﻿
//----------------------------------------------------------------------
//Symbol 27 MovieClip [UIComponentExtensions] Frame 1
//----------------------------------------------------------------------
    #initclip 32
    Object.registerClass("UIComponentExtensions", mx.core.ext.UIComponentExtensions);
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 46 MovieClip [__Packages.mx.skins.halo.FocusRect] Frame 0
//----------------------------------------------------------------------
    class mx.skins.halo.FocusRect extends mx.skins.SkinElement
    {
        var boundingBox_mc, _xscale, _yscale, clear, beginFill, drawRoundRect, endFill, _visible;
        function FocusRect () {
            super();
            boundingBox_mc._visible = false;
            boundingBox_mc._width = (boundingBox_mc._height = 0);
        }
        function draw(o) {
            o.adjustFocusRect();
        }
        function setSize(w, h, r, a, rectCol) {
            _xscale = (_yscale = 100);
            clear();
            if (typeof(r) == "object") {
                r.br = ((r.br > 2) ? (r.br - 2) : 0);
                r.bl = ((r.bl > 2) ? (r.bl - 2) : 0);
                r.tr = ((r.tr > 2) ? (r.tr - 2) : 0);
                r.tl = ((r.tl > 2) ? (r.tl - 2) : 0);
                beginFill(rectCol, a * 0.3);
                drawRoundRect(0, 0, w, h, r);
                drawRoundRect(2, 2, w - 4, h - 4, r);
                endFill();
                r.br = ((r.br > 1) ? (r.br + 1) : 0);
                r.bl = ((r.bl > 1) ? (r.bl + 1) : 0);
                r.tr = ((r.tr > 1) ? (r.tr + 1) : 0);
                r.tl = ((r.tl > 1) ? (r.tl + 1) : 0);
                beginFill(rectCol, a * 0.3);
                drawRoundRect(1, 1, w - 2, h - 2, r);
                r.br = ((r.br > 1) ? (r.br - 1) : 0);
                r.bl = ((r.bl > 1) ? (r.bl - 1) : 0);
                r.tr = ((r.tr > 1) ? (r.tr - 1) : 0);
                r.tl = ((r.tl > 1) ? (r.tl - 1) : 0);
                drawRoundRect(2, 2, w - 4, h - 4, r);
                endFill();
            } else {
                var _local5;
                if (r != 0) {
                    _local5 = r - 2;
                } else {
                    _local5 = 0;
                }
                beginFill(rectCol, a * 0.3);
                drawRoundRect(0, 0, w, h, r);
                drawRoundRect(2, 2, w - 4, h - 4, _local5);
                endFill();
                beginFill(rectCol, a * 0.3);
                if (r != 0) {
                    _local5 = r - 2;
                    r = r - 1;
                } else {
                    _local5 = 0;
                    r = 0;
                }
                drawRoundRect(1, 1, w - 2, h - 2, r);
                drawRoundRect(2, 2, w - 4, h - 4, _local5);
                endFill();
            }
        }
        function handleEvent(e) {
            if (e.type == "unload") {
                _visible = true;
            } else if (e.type == "resize") {
                e.target.adjustFocusRect();
            } else if (e.type == "move") {
                e.target.adjustFocusRect();
            }
        }
        static function classConstruct() {
            mx.core.UIComponent.prototype.drawFocus = function (focused) {
                var _local2 = this._parent.focus_mc;
                if (!focused) {
                    _local2._visible = false;
                    this.removeEventListener("unload", _local2);
                    this.removeEventListener("move", _local2);
                    this.removeEventListener("resize", _local2);
                } else {
                    if (_local2 == undefined) {
                        _local2 = this._parent.createChildAtDepth("FocusRect", mx.managers.DepthManager.kTop);
                        _local2.tabEnabled = false;
                        this._parent.focus_mc = _local2;
                    } else {
                        _local2._visible = true;
                    }
                    _local2.draw(this);
                    if (_local2.getDepth() < this.getDepth()) {
                        _local2.setDepthAbove(this);
                    }
                    this.addEventListener("unload", _local2);
                    this.addEventListener("move", _local2);
                    this.addEventListener("resize", _local2);
                }
            };
            mx.core.UIComponent.prototype.adjustFocusRect = function () {
                var _local2 = this.getStyle("themeColor");
                if (_local2 == undefined) {
                    _local2 = 8453965 /* 0x80FF4D */;
                }
                var _local3 = this._parent.focus_mc;
                _local3.setSize(this.width + 4, this.height + 4, 0, 100, _local2);
                _local3.move(this.x - 2, this.y - 2);
            };
            TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
            TextField.prototype.adjustFocusRect = mx.core.UIComponent.prototype.adjustFocusRect;
            mx.skins.halo.FocusRect.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
            return(true);
        }
        static var classConstructed = classConstruct();
        static var DefaultsDependency = mx.skins.halo.Defaults;
        static var UIComponentDependency = mx.core.UIComponent;
    }
﻿
//----------------------------------------------------------------------
//Symbol 37 MovieClip [__Packages.mx.styles.CSSStyleDeclaration] Frame 0
//----------------------------------------------------------------------
    class mx.styles.CSSStyleDeclaration
    {
        var _tf;
        function CSSStyleDeclaration () {
        }
        function __getTextFormat(tf, bAll) {
            var _local5 = false;
            if (_tf != undefined) {
                var _local2;
                for (_local2 in mx.styles.StyleManager.TextFormatStyleProps) {
                    if (bAll || (mx.styles.StyleManager.TextFormatStyleProps[_local2])) {
                        if (tf[_local2] == undefined) {
                            var _local3 = _tf[_local2];
                            if (_local3 != undefined) {
                                tf[_local2] = _local3;
                            } else {
                                _local5 = true;
                            }
                        }
                    }
                }
            } else {
                _local5 = true;
            }
            return(_local5);
        }
        function getStyle(styleProp) {
            var _local2 = this[styleProp];
            var _local3 = mx.styles.StyleManager.getColorName(_local2);
            return(((_local3 == undefined) ? (_local2) : (_local3)));
        }
        static function classConstruct() {
            mx.styles.CSSTextStyles.addTextStyles(mx.styles.CSSStyleDeclaration.prototype, true);
            return(true);
        }
        static var classConstructed = classConstruct();
        static var CSSTextStylesDependency = mx.styles.CSSTextStyles;
    }
﻿
//----------------------------------------------------------------------
//Symbol 42 MovieClip [__Packages.mx.skins.halo.Defaults] Frame 0
//----------------------------------------------------------------------
    class mx.skins.halo.Defaults
    {
        var beginGradientFill, beginFill, moveTo, lineTo, curveTo, endFill;
        function Defaults () {
        }
        static function setThemeDefaults() {
            var _local2 = _global.style;
            _local2.themeColor = 8453965 /* 0x80FF4D */;
            _local2.disabledColor = 8684164 /* 0x848284 */;
            _local2.modalTransparency = 0;
            _local2.filled = true;
            _local2.stroked = true;
            _local2.strokeWidth = 1;
            _local2.strokeColor = 0;
            _local2.fillColor = 16777215 /* 0xFFFFFF */;
            _local2.repeatInterval = 35;
            _local2.repeatDelay = 500;
            _local2.fontFamily = "_sans";
            _local2.fontSize = 12;
            _local2.selectionColor = 13500353 /* 0xCDFFC1 */;
            _local2.rollOverColor = 14942166 /* 0xE3FFD6 */;
            _local2.useRollOver = true;
            _local2.backgroundDisabledColor = 14540253 /* 0xDDDDDD */;
            _local2.selectionDisabledColor = 14540253 /* 0xDDDDDD */;
            _local2.selectionDuration = 200;
            _local2.openDuration = 250;
            _local2.borderStyle = "inset";
            _local2.color = 734012 /* 0x0B333C */;
            _local2.textSelectedColor = 24371;
            _local2.textRollOverColor = 2831164 /* 0x2B333C */;
            _local2.textDisabledColor = 16777215 /* 0xFFFFFF */;
            _local2.vGridLines = true;
            _local2.hGridLines = false;
            _local2.vGridLineColor = 6710886 /* 0x666666 */;
            _local2.hGridLineColor = 6710886 /* 0x666666 */;
            _local2.headerColor = 15395562 /* 0xEAEAEA */;
            _local2.indentation = 17;
            _local2.folderOpenIcon = "TreeFolderOpen";
            _local2.folderClosedIcon = "TreeFolderClosed";
            _local2.defaultLeafIcon = "TreeNodeIcon";
            _local2.disclosureOpenIcon = "TreeDisclosureOpen";
            _local2.disclosureClosedIcon = "TreeDisclosureClosed";
            _local2.popupDuration = 150;
            _local2.todayColor = 6710886 /* 0x666666 */;
            _local2 = (_global.styles.ScrollSelectList = new mx.styles.CSSStyleDeclaration());
            _local2.backgroundColor = 16777215 /* 0xFFFFFF */;
            _local2.borderColor = 13290186 /* 0xCACACA */;
            _local2.borderStyle = "inset";
            _local2 = (_global.styles.ComboBox = new mx.styles.CSSStyleDeclaration());
            _local2.borderStyle = "inset";
            _local2 = (_global.styles.NumericStepper = new mx.styles.CSSStyleDeclaration());
            _local2.textAlign = "center";
            _local2 = (_global.styles.RectBorder = new mx.styles.CSSStyleDeclaration());
            _local2.borderColor = 14015965 /* 0xD5DDDD */;
            _local2.buttonColor = 7305079 /* 0x6F7777 */;
            _local2.shadowColor = 15658734 /* 0xEEEEEE */;
            _local2.highlightColor = 12897484 /* 0xC4CCCC */;
            _local2.shadowCapColor = 14015965 /* 0xD5DDDD */;
            _local2.borderCapColor = 9542041 /* 0x919999 */;
            var _local4 = new Object();
            _local4.borderColor = 16711680 /* 0xFF0000 */;
            _local4.buttonColor = 16711680 /* 0xFF0000 */;
            _local4.shadowColor = 16711680 /* 0xFF0000 */;
            _local4.highlightColor = 16711680 /* 0xFF0000 */;
            _local4.shadowCapColor = 16711680 /* 0xFF0000 */;
            _local4.borderCapColor = 16711680 /* 0xFF0000 */;
            mx.core.UIComponent.prototype.origBorderStyles = _local4;
            var _local3;
            _local3 = (_global.styles.TextInput = new mx.styles.CSSStyleDeclaration());
            _local3.backgroundColor = 16777215 /* 0xFFFFFF */;
            _local3.borderStyle = "inset";
            _global.styles.TextArea = _global.styles.TextInput;
            _local3 = (_global.styles.Window = new mx.styles.CSSStyleDeclaration());
            _local3.borderStyle = "default";
            _local3 = (_global.styles.windowStyles = new mx.styles.CSSStyleDeclaration());
            _local3.fontWeight = "bold";
            _local3 = (_global.styles.dataGridStyles = new mx.styles.CSSStyleDeclaration());
            _local3.fontWeight = "bold";
            _local3 = (_global.styles.Alert = new mx.styles.CSSStyleDeclaration());
            _local3.borderStyle = "alert";
            _local3 = (_global.styles.ScrollView = new mx.styles.CSSStyleDeclaration());
            _local3.borderStyle = "inset";
            _local3 = (_global.styles.View = new mx.styles.CSSStyleDeclaration());
            _local3.borderStyle = "none";
            _local3 = (_global.styles.ProgressBar = new mx.styles.CSSStyleDeclaration());
            _local3.color = 11187123 /* 0xAAB3B3 */;
            _local3.fontWeight = "bold";
            _local3 = (_global.styles.AccordionHeader = new mx.styles.CSSStyleDeclaration());
            _local3.fontWeight = "bold";
            _local3.fontSize = "11";
            _local3 = (_global.styles.Accordion = new mx.styles.CSSStyleDeclaration());
            _local3.borderStyle = "solid";
            _local3.backgroundColor = 16777215 /* 0xFFFFFF */;
            _local3.borderColor = 9081738 /* 0x8A938A */;
            _local3.headerHeight = 22;
            _local3.marginLeft = (_local3.marginRight = (_local3.marginTop = (_local3.marginBottom = -1)));
            _local3.verticalGap = -1;
            _local3 = (_global.styles.DateChooser = new mx.styles.CSSStyleDeclaration());
            _local3.borderColor = 9542041 /* 0x919999 */;
            _local3.headerColor = 16777215 /* 0xFFFFFF */;
            _local3 = (_global.styles.CalendarLayout = new mx.styles.CSSStyleDeclaration());
            _local3.fontSize = 10;
            _local3.textAlign = "right";
            _local3.color = 2831164 /* 0x2B333C */;
            _local3 = (_global.styles.WeekDayStyle = new mx.styles.CSSStyleDeclaration());
            _local3.fontWeight = "bold";
            _local3.fontSize = 11;
            _local3.textAlign = "center";
            _local3.color = 2831164 /* 0x2B333C */;
            _local3 = (_global.styles.TodayStyle = new mx.styles.CSSStyleDeclaration());
            _local3.color = 16777215 /* 0xFFFFFF */;
            _local3 = (_global.styles.HeaderDateText = new mx.styles.CSSStyleDeclaration());
            _local3.fontSize = 12;
            _local3.fontWeight = "bold";
            _local3.textAlign = "center";
        }
        function drawRoundRect(x, y, w, h, r, c, alpha, rot, gradient, ratios) {
            if (typeof(r) == "object") {
                var _local18 = r.br;
                var _local16 = r.bl;
                var _local15 = r.tl;
                var _local10 = r.tr;
            } else {
                var _local10 = r;
                var _local15 = _local10;
                var _local16 = _local15;
                var _local18 = _local16;
            }
            if (typeof(c) == "object") {
                if (typeof(alpha) != "object") {
                    var _local9 = [alpha, alpha];
                } else {
                    var _local9 = alpha;
                }
                if (ratios == undefined) {
                    ratios = [0, 255];
                }
                var _local14 = h * 0.7;
                if (typeof(rot) != "object") {
                    var _local11 = {matrixType:"box", x:-_local14, y:_local14, w:w * 2, h:h * 4, r:rot * 0.0174532925199433 /* Math.PI/180 */};
                } else {
                    var _local11 = rot;
                }
                if (gradient == "radial") {
                    beginGradientFill("radial", c, _local9, ratios, _local11);
                } else {
                    beginGradientFill("linear", c, _local9, ratios, _local11);
                }
            } else if (c != undefined) {
                beginFill(c, alpha);
            }
            r = _local18;
            var _local13 = r - (r * 0.707106781186547);
            var _local12 = r - (r * 0.414213562373095);
            moveTo(x + w, (y + h) - r);
            lineTo(x + w, (y + h) - r);
            curveTo(x + w, (y + h) - _local12, (x + w) - _local13, (y + h) - _local13);
            curveTo((x + w) - _local12, y + h, (x + w) - r, y + h);
            r = _local16;
            _local13 = r - (r * 0.707106781186547);
            _local12 = r - (r * 0.414213562373095);
            lineTo(x + r, y + h);
            curveTo(x + _local12, y + h, x + _local13, (y + h) - _local13);
            curveTo(x, (y + h) - _local12, x, (y + h) - r);
            r = _local15;
            _local13 = r - (r * 0.707106781186547);
            _local12 = r - (r * 0.414213562373095);
            lineTo(x, y + r);
            curveTo(x, y + _local12, x + _local13, y + _local13);
            curveTo(x + _local12, y, x + r, y);
            r = _local10;
            _local13 = r - (r * 0.707106781186547);
            _local12 = r - (r * 0.414213562373095);
            lineTo((x + w) - r, y);
            curveTo((x + w) - _local12, y, (x + w) - _local13, y + _local13);
            curveTo(x + w, y + _local12, x + w, y + r);
            lineTo(x + w, (y + h) - r);
            if (c != undefined) {
                endFill();
            }
        }
        static function classConstruct() {
            mx.core.ext.UIObjectExtensions.Extensions();
            setThemeDefaults();
            mx.core.UIObject.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
            return(true);
        }
        static var classConstructed = classConstruct();
        static var CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
        static var UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        static var UIObjectDependency = mx.core.UIObject;
    }
﻿
//----------------------------------------------------------------------
//Symbol 40 MovieClip [__Packages.mx.skins.ColoredSkinElement] Frame 0
//----------------------------------------------------------------------
    class mx.skins.ColoredSkinElement
    {
        var getStyle, _color, onEnterFrame;
        function ColoredSkinElement () {
        }
        function setColor(c) {
            if (c != undefined) {
                var _local2 = new Color(this);
                _local2.setRGB(c);
            }
        }
        function draw(Void) {
            setColor(getStyle(_color));
            onEnterFrame = undefined;
        }
        function invalidateStyle(Void) {
            onEnterFrame = draw;
        }
        static function setColorStyle(p, colorStyle) {
            if (p._color == undefined) {
                p._color = colorStyle;
            }
            p.setColor = mixins.setColor;
            p.invalidateStyle = mixins.invalidateStyle;
            p.draw = mixins.draw;
            p.setColor(p.getStyle(colorStyle));
        }
        static var mixins = new mx.skins.ColoredSkinElement();
    }
﻿
//----------------------------------------------------------------------
//Symbol 4 MovieClip [__Packages.mx.controls.Button] Frame 0
//----------------------------------------------------------------------
    class mx.controls.Button extends mx.controls.SimpleButton
    {
        var initializing, labelPath, initIcon, getState, enabled, phase, idNames, __width, __height, setState, invalidate, iconName, refresh, createLabel, _iconLinkageName, removeIcons, hitArea_mc, createEmptyObject;
        function Button () {
            super();
        }
        function init(Void) {
            super.init();
        }
        function draw() {
            if (initializing) {
                labelPath.visible = true;
            }
            super.draw();
            if (initIcon != undefined) {
                _setIcon(initIcon);
            }
            delete initIcon;
        }
        function onRelease(Void) {
            super.onRelease();
        }
        function createChildren(Void) {
            super.createChildren();
        }
        function setSkin(tag, linkageName, initobj) {
            return(super.setSkin(tag, linkageName, initobj));
        }
        function viewSkin(varName) {
            var _local3 = (getState() ? "true" : "false");
            _local3 = _local3 + (enabled ? (phase) : "disabled");
            super.viewSkin(varName, {styleName:this, borderStyle:_local3});
        }
        function invalidateStyle(c) {
            labelPath.invalidateStyle(c);
            super.invalidateStyle(c);
        }
        function setColor(c) {
            var _local2 = 0;
            while (_local2 < 8) {
                this[idNames[_local2]].redraw(true);
                _local2++;
            }
        }
        function setEnabled(enable) {
            labelPath.enabled = enable;
            super.setEnabled(enable);
        }
        function calcSize(tag, ref) {
            if ((__width == undefined) || (__height == undefined)) {
                return(undefined);
            }
            if (tag < 7) {
                ref.setSize(__width, __height, true);
            }
        }
        function size(Void) {
            setState(getState());
            setHitArea(__width, __height);
            var _local3 = 0;
            while (_local3 < 8) {
                var _local4 = idNames[_local3];
                if (typeof(this[_local4]) == "movieclip") {
                    this[_local4].setSize(__width, __height, true);
                }
                _local3++;
            }
            super.size();
        }
        function set labelPlacement(val) {
            __labelPlacement = val;
            invalidate();
            //return(labelPlacement);
        }
        function get labelPlacement() {
            return(__labelPlacement);
        }
        function getLabelPlacement(Void) {
            return(__labelPlacement);
        }
        function setLabelPlacement(val) {
            __labelPlacement = val;
            invalidate();
        }
        function getBtnOffset(Void) {
            if (getState()) {
                var _local2 = btnOffset;
            } else if (phase == "down") {
                var _local2 = btnOffset;
            } else {
                var _local2 = 0;
            }
            return(_local2);
        }
        function setView(offset) {
            var _local16 = (offset ? (btnOffset) : 0);
            var _local12 = getLabelPlacement();
            var _local7 = 0;
            var _local6 = 0;
            var _local9 = 0;
            var _local8 = 0;
            var _local5 = 0;
            var _local4 = 0;
            var _local3 = labelPath;
            var _local2 = iconName;
            var _local15 = _local3.textWidth;
            var _local14 = _local3.textHeight;
            var _local10 = (__width - borderW) - borderW;
            var _local11 = (__height - borderW) - borderW;
            if (_local2 != undefined) {
                _local7 = _local2._width;
                _local6 = _local2._height;
            }
            if ((_local12 == "left") || (_local12 == "right")) {
                if (_local3 != undefined) {
                    _local9 = Math.min(_local10 - _local7, _local15 + 5);
                    _local3._width = _local9;
                    _local8 = Math.min(_local11, _local14 + 5);
                    _local3._height = _local8;
                }
                if (_local12 == "right") {
                    _local5 = _local7;
                    if (centerContent) {
                        _local5 = _local5 + (((_local10 - _local9) - _local7) / 2);
                    }
                    _local2._x = _local5 - _local7;
                } else {
                    _local5 = (_local10 - _local9) - _local7;
                    if (centerContent) {
                        _local5 = _local5 / 2;
                    }
                    _local2._x = _local5 + _local9;
                }
                _local4 = 0;
                _local2._y = _local4;
                if (centerContent) {
                    _local2._y = (_local11 - _local6) / 2;
                    _local4 = (_local11 - _local8) / 2;
                }
                if (!centerContent) {
                    _local2._y = _local2._y + Math.max(0, (_local8 - _local6) / 2);
                }
            } else {
                if (_local3 != undefined) {
                    _local9 = Math.min(_local10, _local15 + 5);
                    _local3._width = _local9;
                    _local8 = Math.min(_local11 - _local6, _local14 + 5);
                    _local3._height = _local8;
                }
                _local5 = (_local10 - _local9) / 2;
                _local2._x = (_local10 - _local7) / 2;
                if (_local12 == "top") {
                    _local4 = (_local11 - _local8) - _local6;
                    if (centerContent) {
                        _local4 = _local4 / 2;
                    }
                    _local2._y = _local4 + _local8;
                } else {
                    _local4 = _local6;
                    if (centerContent) {
                        _local4 = _local4 + (((_local11 - _local8) - _local6) / 2);
                    }
                    _local2._y = _local4 - _local6;
                }
            }
            var _local13 = borderW + _local16;
            _local3._x = _local5 + _local13;
            _local3._y = _local4 + _local13;
            _local2._x = _local2._x + _local13;
            _local2._y = _local2._y + _local13;
        }
        function set label(lbl) {
            setLabel(lbl);
            //return(label);
        }
        function setLabel(label) {
            if (label == "") {
                labelPath.removeTextField();
                refresh();
                return(undefined);
            }
            if (labelPath == undefined) {
                var _local2 = createLabel("labelPath", 200, label);
                _local2._width = _local2.textWidth + 5;
                _local2._height = _local2.textHeight + 5;
                if (initializing) {
                    _local2.visible = false;
                }
            } else {
                delete labelPath.__text;
                labelPath.text = label;
                refresh();
            }
        }
        function getLabel(Void) {
            return(((labelPath.__text != undefined) ? (labelPath.__text) : (labelPath.text)));
        }
        function get label() {
            return(getLabel());
        }
        function _getIcon(Void) {
            return(_iconLinkageName);
        }
        function get icon() {
            if (initializing) {
                return(initIcon);
            }
            return(_iconLinkageName);
        }
        function _setIcon(linkage) {
            if (initializing) {
                if (linkage == "") {
                    return(undefined);
                }
                initIcon = linkage;
            } else {
                if (linkage == "") {
                    removeIcons();
                    return(undefined);
                }
                super.changeIcon(0, linkage);
                super.changeIcon(1, linkage);
                super.changeIcon(3, linkage);
                super.changeIcon(4, linkage);
                super.changeIcon(5, linkage);
                _iconLinkageName = linkage;
                refresh();
            }
        }
        function set icon(linkage) {
            _setIcon(linkage);
            //return(icon);
        }
        function setHitArea(w, h) {
            if (hitArea_mc == undefined) {
                createEmptyObject("hitArea_mc", 100);
            }
            var _local2 = hitArea_mc;
            _local2.clear();
            _local2.beginFill(16711680);
            _local2.drawRect(0, 0, w, h);
            _local2.endFill();
            _local2.setVisible(false);
        }
        static var symbolName = "Button";
        static var symbolOwner = mx.controls.Button;
        var className = "Button";
        static var version = "2.0.2.126";
        var btnOffset = 0;
        var _color = "buttonColor";
        var __label = "default value";
        var __labelPlacement = "right";
        var falseUpSkin = "ButtonSkin";
        var falseDownSkin = "ButtonSkin";
        var falseOverSkin = "ButtonSkin";
        var falseDisabledSkin = "ButtonSkin";
        var trueUpSkin = "ButtonSkin";
        var trueDownSkin = "ButtonSkin";
        var trueOverSkin = "ButtonSkin";
        var trueDisabledSkin = "ButtonSkin";
        var falseUpIcon = "";
        var falseDownIcon = "";
        var falseOverIcon = "";
        var falseDisabledIcon = "";
        var trueUpIcon = "";
        var trueDownIcon = "";
        var trueOverIcon = "";
        var trueDisabledIcon = "";
        var clipParameters = {labelPlacement:1, icon:1, toggle:1, selected:1, label:1};
        static var mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.Button.prototype.clipParameters, mx.controls.SimpleButton.prototype.clipParameters);
        var centerContent = true;
        var borderW = 1;
    }
﻿
//----------------------------------------------------------------------
//Symbol 33 MovieClip [Button] Frame 1
//----------------------------------------------------------------------
    #initclip 38
    Object.registerClass("Button", mx.controls.Button);
    #endinitclip

    stop();

﻿
//----------------------------------------------------------------------
//Symbol 35 MovieClip [__Packages.mx.styles.CSSTextStyles] Frame 0
//----------------------------------------------------------------------
    class mx.styles.CSSTextStyles
    {
        function CSSTextStyles () {
        }
        static function addTextStyles(o, bColor) {
            o.addProperty("textAlign", function () {
                return(this._tf.align);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.align = x;
            });
            o.addProperty("fontWeight", function () {
                return(((this._tf.bold != undefined) ? ((this._tf.bold ? "bold" : "none")) : undefined));
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.bold = x == "bold";
            });
            if (bColor) {
                o.addProperty("color", function () {
                    return(this._tf.color);
                }, function (x) {
                    if (this._tf == undefined) {
                        this._tf = new TextFormat();
                    }
                    this._tf.color = x;
                });
            }
            o.addProperty("fontFamily", function () {
                return(this._tf.font);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.font = x;
            });
            o.addProperty("textIndent", function () {
                return(this._tf.indent);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.indent = x;
            });
            o.addProperty("fontStyle", function () {
                return(((this._tf.italic != undefined) ? ((this._tf.italic ? "italic" : "none")) : undefined));
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.italic = x == "italic";
            });
            o.addProperty("marginLeft", function () {
                return(this._tf.leftMargin);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.leftMargin = x;
            });
            o.addProperty("marginRight", function () {
                return(this._tf.rightMargin);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.rightMargin = x;
            });
            o.addProperty("fontSize", function () {
                return(this._tf.size);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.size = x;
            });
            o.addProperty("textDecoration", function () {
                return(((this._tf.underline != undefined) ? ((this._tf.underline ? "underline" : "none")) : undefined));
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.underline = x == "underline";
            });
            o.addProperty("embedFonts", function () {
                return(this._tf.embedFonts);
            }, function (x) {
                if (this._tf == undefined) {
                    this._tf = new TextFormat();
                }
                this._tf.embedFonts = x;
            });
        }
    }
﻿
//----------------------------------------------------------------------
//Symbol 31 MovieClip [RectBorder] Frame 1
//----------------------------------------------------------------------
    #initclip 36
    mx.skins.SkinElement.registerElement(mx.skins.RectBorder.symbolName, Object(mx.skins.RectBorder));
    Object.registerClass("RectBorder", mx.skins.halo.RectBorder);
    #endinitclip

    stop();
﻿
//----------------------------------------------------------------------
//Symbol 51 MovieClip [__Packages.mx.skins.RectBorder] Frame 0
//----------------------------------------------------------------------
    class mx.skins.RectBorder extends mx.skins.Border
    {
        var __width, __height, offset, __borderMetrics;
        function RectBorder () {
            super();
        }
        function get width() {
            return(__width);
        }
        function get height() {
            return(__height);
        }
        function init(Void) {
            super.init();
        }
        function draw(Void) {
            size();
        }
        function getBorderMetrics(Void) {
            var _local2 = offset;
            if (__borderMetrics == undefined) {
                __borderMetrics = {left:_local2, top:_local2, right:_local2, bottom:_local2};
            } else {
                __borderMetrics.left = _local2;
                __borderMetrics.top = _local2;
                __borderMetrics.right = _local2;
                __borderMetrics.bottom = _local2;
            }
            return(__borderMetrics);
        }
        function get borderMetrics() {
            return(getBorderMetrics());
        }
        function drawBorder(Void) {
        }
        function size(Void) {
            drawBorder();
        }
        function setColor(Void) {
            drawBorder();
        }
        static var symbolName = "RectBorder";
        static var symbolOwner = mx.skins.RectBorder;
        static var version = "2.0.2.126";
        var className = "RectBorder";
        var borderStyleName = "borderStyle";
        var borderColorName = "borderColor";
        var shadowColorName = "shadowColor";
        var highlightColorName = "highlightColor";
        var buttonColorName = "buttonColor";
        var backgroundColorName = "backgroundColor";
    }
﻿
//----------------------------------------------------------------------
//Symbol 50 MovieClip [__Packages.mx.skins.Border] Frame 0
//----------------------------------------------------------------------
    class mx.skins.Border extends mx.core.UIObject
    {
        function Border () {
            super();
        }
        function init(Void) {
            super.init();
        }
        static var symbolName = "Border";
        static var symbolOwner = mx.skins.Border;
        var className = "Border";
        var tagBorder = 0;
        var idNames = new Array("border_mc");
    }
﻿
//----------------------------------------------------------------------
//Symbol 10 MovieClip [BrdrFace] Frame 1
//----------------------------------------------------------------------
    mx.skins.ColoredSkinElement.setColorStyle(this, "buttonColor");

﻿
//----------------------------------------------------------------------
//Symbol 36 MovieClip [__Packages.mx.styles.StyleManager] Frame 0
//----------------------------------------------------------------------
    class mx.styles.StyleManager
    {
        function StyleManager () {
        }
        static function registerInheritingStyle(styleName) {
            inheritingStyles[styleName] = true;
        }
        static function isInheritingStyle(styleName) {
            return(inheritingStyles[styleName] == true);
        }
        static function registerColorStyle(styleName) {
            colorStyles[styleName] = true;
        }
        static function isColorStyle(styleName) {
            return(colorStyles[styleName] == true);
        }
        static function registerColorName(colorName, colorValue) {
            colorNames[colorName] = colorValue;
        }
        static function isColorName(colorName) {
            return(colorNames[colorName] != undefined);
        }
        static function getColorName(colorName) {
            return(colorNames[colorName]);
        }
        static var inheritingStyles = {color:true, direction:true, fontFamily:true, fontSize:true, fontStyle:true, fontWeight:true, textAlign:true, textIndent:true};
        static var colorStyles = {barColor:true, trackColor:true, borderColor:true, buttonColor:true, color:true, dateHeaderColor:true, dateRollOverColor:true, disabledColor:true, fillColor:true, highlightColor:true, scrollTrackColor:true, selectedDateColor:true, shadowColor:true, strokeColor:true, symbolBackgroundColor:true, symbolBackgroundDisabledColor:true, symbolBackgroundPressedColor:true, symbolColor:true, symbolDisabledColor:true, themeColor:true, todayIndicatorColor:true, shadowCapColor:true, borderCapColor:true, focusColor:true};
        static var colorNames = {black:0, white:16777215, red:16711680, green:65280, blue:255, magenta:16711935, yellow:16776960, cyan:65535, haloGreen:8453965, haloBlue:2881013, haloOrange:16761344};
        static var TextFormatStyleProps = {font:true, size:true, color:true, leftMargin:false, rightMargin:false, italic:true, bold:true, align:true, indent:true, underline:false, embedFonts:false};
        static var TextStyleMap = {textAlign:true, fontWeight:true, color:true, fontFamily:true, textIndent:true, fontStyle:true, lineHeight:true, marginLeft:true, marginRight:true, fontSize:true, textDecoration:true, embedFonts:true};
    }
﻿
//----------------------------------------------------------------------
//Symbol 2 MovieClip [__Packages.mx.core.UIComponent] Frame 0
//----------------------------------------------------------------------
    class mx.core.UIComponent extends mx.core.UIObject
    {
        var __width, __height, invalidate, stylecache, removeEventListener, dispatchEvent, drawFocus, addEventListener, _xscale, _yscale, _focusrect, watch, enabled;
        function UIComponent () {
            super();
        }
        function get width() {
            return(__width);
        }
        function get height() {
            return(__height);
        }
        function setVisible(x, noEvent) {
            super.setVisible(x, noEvent);
        }
        function enabledChanged(id, oldValue, newValue) {
            setEnabled(newValue);
            invalidate();
            delete stylecache.tf;
            return(newValue);
        }
        function setEnabled(enabled) {
            invalidate();
        }
        function getFocus() {
            var selFocus = Selection.getFocus();
            return(((selFocus === null) ? null : (eval (selFocus))));
        }
        function setFocus() {
            Selection.setFocus(this);
        }
        function getFocusManager() {
            var _local2 = this;
            while (_local2 != undefined) {
                if (_local2.focusManager != undefined) {
                    return(_local2.focusManager);
                }
                _local2 = _local2._parent;
            }
            return(undefined);
        }
        function onKillFocus(newFocus) {
            removeEventListener("keyDown", this);
            removeEventListener("keyUp", this);
            dispatchEvent({type:"focusOut"});
            drawFocus(false);
        }
        function onSetFocus(oldFocus) {
            addEventListener("keyDown", this);
            addEventListener("keyUp", this);
            dispatchEvent({type:"focusIn"});
            if (getFocusManager().bDrawFocus != false) {
                drawFocus(true);
            }
        }
        function findFocusInChildren(o) {
            if (o.focusTextField != undefined) {
                return(o.focusTextField);
            }
            if (o.tabEnabled == true) {
                return(o);
            }
            return(undefined);
        }
        function findFocusFromObject(o) {
            if (o.tabEnabled != true) {
                if (o._parent == undefined) {
                    return(undefined);
                }
                if (o._parent.tabEnabled == true) {
                    o = o._parent;
                } else if (o._parent.tabChildren) {
                    o = findFocusInChildren(o._parent);
                } else {
                    o = findFocusFromObject(o._parent);
                }
            }
            return(o);
        }
        function pressFocus() {
            var _local3 = findFocusFromObject(this);
            var _local2 = getFocus();
            if (_local3 != _local2) {
                _local2.drawFocus(false);
                if (getFocusManager().bDrawFocus != false) {
                    _local3.drawFocus(true);
                }
            }
        }
        function releaseFocus() {
            var _local2 = findFocusFromObject(this);
            if (_local2 != getFocus()) {
                _local2.setFocus();
            }
        }
        function isParent(o) {
            while (o != undefined) {
                if (o == this) {
                    return(true);
                }
                o = o._parent;
            }
            return(false);
        }
        function size() {
        }
        function init() {
            super.init();
            _xscale = 100;
            _yscale = 100;
            _focusrect = _global.useFocusRect == false;
            watch("enabled", enabledChanged);
            if (enabled == false) {
                setEnabled(false);
            }
        }
        function dispatchValueChangedEvent(value) {
            dispatchEvent({type:"valueChanged", value:value});
        }
        static var symbolName = "UIComponent";
        static var symbolOwner = mx.core.UIComponent;
        static var version = "2.0.2.126";
        static var kStretch = 5000;
        var focusEnabled = true;
        var tabEnabled = true;
        var origBorderStyles = {themeColor:16711680};
        var clipParameters = {};
        static var mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.core.UIComponent.prototype.clipParameters, mx.core.UIObject.prototype.clipParameters);
    }
﻿
//----------------------------------------------------------------------
//Symbol 48 MovieClip [__Packages.mx.styles.CSSSetStyle] Frame 0
//----------------------------------------------------------------------
    class mx.styles.CSSSetStyle
    {
        var styleName, stylecache, _color, setColor, invalidateStyle;
        function CSSSetStyle () {
        }
        function _setStyle(styleProp, newValue) {
            this[styleProp] = newValue;
            if (mx.styles.StyleManager.TextStyleMap[styleProp] != undefined) {
                if (styleProp == "color") {
                    if (isNaN(newValue)) {
                        newValue = mx.styles.StyleManager.getColorName(newValue);
                        this[styleProp] = newValue;
                        if (newValue == undefined) {
                            return(undefined);
                        }
                    }
                }
                _level0.changeTextStyleInChildren(styleProp);
                return(undefined);
            }
            if (mx.styles.StyleManager.isColorStyle(styleProp)) {
                if (isNaN(newValue)) {
                    newValue = mx.styles.StyleManager.getColorName(newValue);
                    this[styleProp] = newValue;
                    if (newValue == undefined) {
                        return(undefined);
                    }
                }
                if (styleProp == "themeColor") {
                    var _local7 = mx.styles.StyleManager.colorNames.haloBlue;
                    var _local6 = mx.styles.StyleManager.colorNames.haloGreen;
                    var _local8 = mx.styles.StyleManager.colorNames.haloOrange;
                    var _local4 = {};
                    _local4[_local7] = 12188666 /* 0xB9FBFA */;
                    _local4[_local6] = 13500353 /* 0xCDFFC1 */;
                    _local4[_local8] = 16766319 /* 0xFFD56F */;
                    var _local5 = {};
                    _local5[_local7] = 13958653 /* 0xD4FDFD */;
                    _local5[_local6] = 14942166 /* 0xE3FFD6 */;
                    _local5[_local8] = 16772787 /* 0xFFEEB3 */;
                    var _local9 = _local4[newValue];
                    var _local10 = _local5[newValue];
                    if (_local9 == undefined) {
                        _local9 = newValue;
                    }
                    if (_local10 == undefined) {
                        _local10 = newValue;
                    }
                    setStyle("selectionColor", _local9);
                    setStyle("rollOverColor", _local10);
                }
                _level0.changeColorStyleInChildren(styleName, styleProp, newValue);
            } else {
                if ((styleProp == "backgroundColor") && (isNaN(newValue))) {
                    newValue = mx.styles.StyleManager.getColorName(newValue);
                    this[styleProp] = newValue;
                    if (newValue == undefined) {
                        return(undefined);
                    }
                }
                _level0.notifyStyleChangeInChildren(styleName, styleProp, newValue);
            }
        }
        function changeTextStyleInChildren(styleProp) {
            var _local4 = getTimer();
            var _local5;
            for (_local5 in this) {
                var _local2 = this[_local5];
                if (_local2._parent == this) {
                    if (_local2.searchKey != _local4) {
                        if (_local2.stylecache != undefined) {
                            delete _local2.stylecache.tf;
                            delete _local2.stylecache[styleProp];
                        }
                        _local2.invalidateStyle(styleProp);
                        _local2.changeTextStyleInChildren(styleProp);
                        _local2.searchKey = _local4;
                    }
                }
            }
        }
        function changeColorStyleInChildren(sheetName, colorStyle, newValue) {
            var _local6 = getTimer();
            var _local7;
            for (_local7 in this) {
                var _local2 = this[_local7];
                if (_local2._parent == this) {
                    if (_local2.searchKey != _local6) {
                        if (((_local2.getStyleName() == sheetName) || (sheetName == undefined)) || (sheetName == "_global")) {
                            if (_local2.stylecache != undefined) {
                                delete _local2.stylecache[colorStyle];
                            }
                            if (typeof(_local2._color) == "string") {
                                if (_local2._color == colorStyle) {
                                    var _local4 = _local2.getStyle(colorStyle);
                                    if (colorStyle == "color") {
                                        if (stylecache.tf.color != undefined) {
                                            stylecache.tf.color = _local4;
                                        }
                                    }
                                    _local2.setColor(_local4);
                                }
                            } else if (_local2._color[colorStyle] != undefined) {
                                if (typeof(_local2) != "movieclip") {
                                    _local2._parent.invalidateStyle();
                                } else {
                                    _local2.invalidateStyle(colorStyle);
                                }
                            }
                        }
                        _local2.changeColorStyleInChildren(sheetName, colorStyle, newValue);
                        _local2.searchKey = _local6;
                    }
                }
            }
        }
        function notifyStyleChangeInChildren(sheetName, styleProp, newValue) {
            var _local5 = getTimer();
            var _local6;
            for (_local6 in this) {
                var _local2 = this[_local6];
                if (_local2._parent == this) {
                    if (_local2.searchKey != _local5) {
                        if (((_local2.styleName == sheetName) || ((_local2.styleName != undefined) && (typeof(_local2.styleName) == "movieclip"))) || (sheetName == undefined)) {
                            if (_local2.stylecache != undefined) {
                                delete _local2.stylecache[styleProp];
                                delete _local2.stylecache.tf;
                            }
                            delete _local2.enabledColor;
                            _local2.invalidateStyle(styleProp);
                        }
                        _local2.notifyStyleChangeInChildren(sheetName, styleProp, newValue);
                        _local2.searchKey = _local5;
                    }
                }
            }
        }
        function setStyle(styleProp, newValue) {
            if (stylecache != undefined) {
                delete stylecache[styleProp];
                delete stylecache.tf;
            }
            this[styleProp] = newValue;
            if (mx.styles.StyleManager.isColorStyle(styleProp)) {
                if (isNaN(newValue)) {
                    newValue = mx.styles.StyleManager.getColorName(newValue);
                    this[styleProp] = newValue;
                    if (newValue == undefined) {
                        return(undefined);
                    }
                }
                if (styleProp == "themeColor") {
                    var _local10 = mx.styles.StyleManager.colorNames.haloBlue;
                    var _local9 = mx.styles.StyleManager.colorNames.haloGreen;
                    var _local11 = mx.styles.StyleManager.colorNames.haloOrange;
                    var _local6 = {};
                    _local6[_local10] = 12188666 /* 0xB9FBFA */;
                    _local6[_local9] = 13500353 /* 0xCDFFC1 */;
                    _local6[_local11] = 16766319 /* 0xFFD56F */;
                    var _local7 = {};
                    _local7[_local10] = 13958653 /* 0xD4FDFD */;
                    _local7[_local9] = 14942166 /* 0xE3FFD6 */;
                    _local7[_local11] = 16772787 /* 0xFFEEB3 */;
                    var _local12 = _local6[newValue];
                    var _local13 = _local7[newValue];
                    if (_local12 == undefined) {
                        _local12 = newValue;
                    }
                    if (_local13 == undefined) {
                        _local13 = newValue;
                    }
                    setStyle("selectionColor", _local12);
                    setStyle("rollOverColor", _local13);
                }
                if (typeof(_color) == "string") {
                    if (_color == styleProp) {
                        if (styleProp == "color") {
                            if (stylecache.tf.color != undefined) {
                                stylecache.tf.color = newValue;
                            }
                        }
                        setColor(newValue);
                    }
                } else if (_color[styleProp] != undefined) {
                    invalidateStyle(styleProp);
                }
                changeColorStyleInChildren(undefined, styleProp, newValue);
            } else {
                if ((styleProp == "backgroundColor") && (isNaN(newValue))) {
                    newValue = mx.styles.StyleManager.getColorName(newValue);
                    this[styleProp] = newValue;
                    if (newValue == undefined) {
                        return(undefined);
                    }
                }
                invalidateStyle(styleProp);
            }
            if (mx.styles.StyleManager.isInheritingStyle(styleProp) || (styleProp == "styleName")) {
                var _local8;
                var _local5 = newValue;
                if (styleProp == "styleName") {
                    _local8 = ((typeof(newValue) == "string") ? (_global.styles[newValue]) : (_local5));
                    _local5 = _local8.themeColor;
                    if (_local5 != undefined) {
                        _local8.rollOverColor = (_local8.selectionColor = _local5);
                    }
                }
                notifyStyleChangeInChildren(undefined, styleProp, newValue);
            }
        }
        static function enableRunTimeCSS() {
        }
        static function classConstruct() {
            var _local2 = MovieClip.prototype;
            var _local3 = mx.styles.CSSSetStyle.prototype;
            mx.styles.CSSStyleDeclaration.prototype.setStyle = _local3._setStyle;
            _local2.changeTextStyleInChildren = _local3.changeTextStyleInChildren;
            _local2.changeColorStyleInChildren = _local3.changeColorStyleInChildren;
            _local2.notifyStyleChangeInChildren = _local3.notifyStyleChangeInChildren;
            _local2.setStyle = _local3.setStyle;
            _global.ASSetPropFlags(_local2, "changeTextStyleInChildren", 1);
            _global.ASSetPropFlags(_local2, "changeColorStyleInChildren", 1);
            _global.ASSetPropFlags(_local2, "notifyStyleChangeInChildren", 1);
            _global.ASSetPropFlags(_local2, "setStyle", 1);
            var _local4 = TextField.prototype;
            _local4.setStyle = _local2.setStyle;
            _local4.changeTextStyleInChildren = _local3.changeTextStyleInChildren;
            return(true);
        }
        static var classConstructed = classConstruct();
        static var CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
    }
﻿
//----------------------------------------------------------------------
//Symbol 20 MovieClip [UIObject] Frame 1
//----------------------------------------------------------------------
    #initclip 28
    Object.registerClass("UIObject", mx.core.UIObject);
    #endinitclip

    stop();
﻿
//----------------------------------------------------------------------
//Symbol 58 MovieClip [__Packages.mx.utils.Delegate] Frame 0
//----------------------------------------------------------------------
    class mx.utils.Delegate extends Object
    {
        var func;
        function Delegate (f) {
            super();
            func = f;
        }
        static function create(obj, func) {
            var _local2 = function () {
                var _local2 = arguments.callee.target;
                var _local3 = arguments.callee.func;
                return(_local3.apply(_local2, arguments));
            };
            _local2.target = obj;
            _local2.func = func;
            return(_local2);
        }
        function createDelegate(obj) {
            return(create(obj, func));
        }
    }
﻿
//----------------------------------------------------------------------
//Instance of Symbol 33 MovieClip [Button] "playButton" in Frame 1
//----------------------------------------------------------------------
//component parameters
onClipEvent (construct) {
    icon = "";
    label = "Record";
    labelPlacement = "right";
    selected = false;
    toggle = false;
    enabled = true;
    visible = true;
    minHeight = 0;
    minWidth = 0;
}
﻿
//----------------------------------------------------------------------
//Symbol 25 MovieClip [FocusRect] Frame 1
//----------------------------------------------------------------------
    #initclip 30
    Object.registerClass("FocusRect", mx.skins.halo.FocusRect);
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 19 MovieClip [UIObjectExtensions] Frame 1
//----------------------------------------------------------------------
    #initclip 27
    Object.registerClass("UIObjectExtensions", mx.core.ext.UIObjectExtensions);
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 38 MovieClip [__Packages.mx.events.EventDispatcher] Frame 0
//----------------------------------------------------------------------
    class mx.events.EventDispatcher
    {
        function EventDispatcher () {
        }
        static function _removeEventListener(queue, event, handler) {
            if (queue != undefined) {
                var _local4 = queue.length;
                var _local1;
                _local1 = 0;
                while (_local1 < _local4) {
                    var _local2 = queue[_local1];
                    if (_local2 == handler) {
                        queue.splice(_local1, 1);
                        return(undefined);
                    }
                    _local1++;
                }
            }
        }
        static function initialize(object) {
            if (_fEventDispatcher == undefined) {
                _fEventDispatcher = new mx.events.EventDispatcher();
            }
            object.addEventListener = _fEventDispatcher.addEventListener;
            object.removeEventListener = _fEventDispatcher.removeEventListener;
            object.dispatchEvent = _fEventDispatcher.dispatchEvent;
            object.dispatchQueue = _fEventDispatcher.dispatchQueue;
        }
        function dispatchQueue(queueObj, eventObj) {
            var _local7 = "__q_" + eventObj.type;
            var _local4 = queueObj[_local7];
            if (_local4 != undefined) {
                var _local5;
                for (_local5 in _local4) {
                    var _local1 = _local4[_local5];
                    var _local3 = typeof(_local1);
                    if ((_local3 == "object") || (_local3 == "movieclip")) {
                        if (_local1.handleEvent != undefined) {
                            _local1.handleEvent(eventObj);
                        }
                        if (_local1[eventObj.type] != undefined) {
                            if (exceptions[eventObj.type] == undefined) {
                                _local1[eventObj.type](eventObj);
                            }
                        }
                    } else {
                        _local1.apply(queueObj, [eventObj]);
                    }
                }
            }
        }
        function dispatchEvent(eventObj) {
            if (eventObj.target == undefined) {
                eventObj.target = this;
            }
            this[eventObj.type + "Handler"](eventObj);
            dispatchQueue(this, eventObj);
        }
        function addEventListener(event, handler) {
            var _local3 = "__q_" + event;
            if (this[_local3] == undefined) {
                this[_local3] = new Array();
            }
            _global.ASSetPropFlags(this, _local3, 1);
            _removeEventListener(this[_local3], event, handler);
            this[_local3].push(handler);
        }
        function removeEventListener(event, handler) {
            var _local2 = "__q_" + event;
            _removeEventListener(this[_local2], event, handler);
        }
        static var _fEventDispatcher = undefined;
        static var exceptions = {move:1, draw:1, load:1};
    }
﻿
//----------------------------------------------------------------------
//Instance of Symbol 33 MovieClip [Button] "stopButton" in Frame 1
//----------------------------------------------------------------------
//component parameters
onClipEvent (construct) {
    icon = "";
    label = "Stop Recording";
    labelPlacement = "right";
    selected = false;
    toggle = false;
    enabled = true;
    visible = true;
    minHeight = 0;
    minWidth = 0;
}
﻿
//----------------------------------------------------------------------
//Instance of Symbol 29 MovieClip [SimpleButton] in Symbol 33 MovieClip [Button] Frame 2
//----------------------------------------------------------------------
//component parameters
onClipEvent (initialize) {
    selected = false;
    toggle = false;
    enabled = true;
    visible = true;
    minHeight = 0;
    minWidth = 0;
}
﻿
//----------------------------------------------------------------------
//Symbol 18 MovieClip [Defaults] Frame 1
//----------------------------------------------------------------------
    #initclip 26
    Object.registerClass("Defaults", mx.skins.halo.Defaults);
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 32 MovieClip [ButtonSkin] Frame 1
//----------------------------------------------------------------------
    #initclip 37
    Object.registerClass("ButtonSkin", mx.skins.halo.ButtonSkin);
    #endinitclip

﻿
//----------------------------------------------------------------------
//Symbol 34 MovieClip [__Packages.mx.skins.SkinElement] Frame 0
//----------------------------------------------------------------------
    class mx.skins.SkinElement extends MovieClip
    {
        var _visible, _x, _y, _width, _height;
        function SkinElement () {
            super();
        }
        static function registerElement(name, className) {
            Object.registerClass(name, ((className == undefined) ? (mx.skins.SkinElement) : (className)));
            _global.skinRegistry[name] = true;
        }
        function __set__visible(visible) {
            _visible = visible;
        }
        function move(x, y) {
            _x = x;
            _y = y;
        }
        function setSize(w, h) {
            _width = w;
            _height = h;
        }
    }
﻿
//----------------------------------------------------------------------
//Frame 1
//----------------------------------------------------------------------
    function playClick() {
        ns.attachVideo(cam);
        ns.attachAudio(mic);
        videoContainer.attachVideo(cam);
        lastVideoName = (((("red5RecordDemo_" + random(getTimer())) + "_") + this._root.id) + "_") + this._root.userid;
        ns.publish(lastVideoName, "record");
        playButton.enabled = false;
        stopButton.enabled = true;
    }
    function stopClick() {
        ns.close();
        videoContainer.attachVideo(null);
        videoContainer.clear();
        playButton.enabled = true;
        stopButton.enabled = false;
        playLastVideo();
    }
    function playLastVideo() {
        videoContainer.attachVideo(ns);
        ns.play(lastVideoName);
    }
    function setupCameraMic() {
        cam = Camera.get();
        cam.setMode(320, 240, 30);
        cam.setQuality(0, 70);
        mic = Microphone.get();
        mic.setRate(44);
    }
    var nc = new NetConnection();
    nc.connect("rtmp://85.88.28.102/oflaDemo");
    var ns = new NetStream(nc);
    var cam = Camera.get();
    var mic = Microphone.get();
    setupCameraMic();
    var lastVideoName = "";
    playButton.addEventListener("click", mx.utils.Delegate.create(this, playClick));
    stopButton.addEventListener("click", mx.utils.Delegate.create(this, stopClick));
